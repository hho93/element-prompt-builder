{"version":3,"sources":["../src/ElementSelector.tsx","../src/utils.ts","../src/ElementHighlighter.tsx","../src/ElementInspector.tsx","../src/Icons.tsx","../src/styles.ts","../src/components.tsx","../src/prompting.ts"],"sourcesContent":["\"use client\";\nimport React, { useCallback, useRef } from 'react';\nimport { getMostSpecificElementAtPoint } from './utils';\n\nexport interface ElementSelectorProps {\n  /**\n   * Callback when an element is hovered\n   */\n  onElementHovered: (element: HTMLElement) => void;\n  \n  /**\n   * Callback when an element is no longer hovered\n   */\n  onElementUnhovered: () => void;\n  \n  /**\n   * Callback when an element is selected\n   */\n  onElementSelected: (element: HTMLElement) => void;\n  \n  /**\n   * List of elements to ignore during selection\n   */\n  ignoreList?: HTMLElement[];\n  \n  /**\n   * CSS selector for elements to exclude\n   */\n  excludeSelector?: string;\n  \n  /**\n   * CSS class name for the selector overlay\n   */\n  className?: string;\n  \n  /**\n   * Custom styles for the selector overlay\n   */\n  style?: React.CSSProperties;\n}\n\n/**\n * ElementSelector component that creates an overlay to select DOM elements\n */\nexport function ElementSelector({\n  onElementHovered,\n  onElementUnhovered,\n  onElementSelected,\n  ignoreList = [],\n  excludeSelector = '',\n  className = '',\n  style = {},\n}: ElementSelectorProps) {\n  const lastHoveredElement = useRef<HTMLElement | null>(null);\n\n  const handleMouseMove = useCallback(\n    (event: React.MouseEvent<HTMLDivElement>) => {\n      const { clientX, clientY } = event;\n      \n      // Hide the overlay temporarily to get accurate element detection\n      const overlayElement = event.currentTarget;\n      if (overlayElement) {\n        overlayElement.style.pointerEvents = 'none';\n      }\n      \n      // Get element at this point (with overlay hidden)\n      const refElement = getMostSpecificElementAtPoint(clientX, clientY, excludeSelector);\n      \n      // Restore the overlay\n      if (overlayElement) {\n        overlayElement.style.pointerEvents = 'auto';\n      }\n      \n      // Ignore if element is in the ignore list\n      if (ignoreList.includes(refElement)) return;\n      \n      // Ignore if element is the overlay itself or a child of it\n      if (refElement === overlayElement || \n          (overlayElement && overlayElement.contains(refElement))) {\n        return;\n      }\n      \n      // Only trigger callback if the hovered element has changed\n      if (lastHoveredElement.current !== refElement) {\n        lastHoveredElement.current = refElement;\n        onElementHovered(refElement);\n      }\n    },\n    [onElementHovered, ignoreList, excludeSelector]\n  );\n\n  const handleMouseLeave = useCallback(() => {\n    lastHoveredElement.current = null;\n    onElementUnhovered();\n  }, [onElementUnhovered]);\n\n  const handleMouseClick = useCallback(\n    (event: React.MouseEvent<HTMLDivElement>) => {\n      // Prevent the default action and stop propagation\n      event.preventDefault();\n      event.stopPropagation();\n      \n      const { clientX, clientY } = event;\n      \n      // Hide the overlay temporarily to get accurate element detection\n      const overlayElement = event.currentTarget;\n      if (overlayElement) {\n        overlayElement.style.pointerEvents = 'none';\n      }\n      \n      // Get the most accurate element at click position\n      const clickedElement = getMostSpecificElementAtPoint(clientX, clientY, excludeSelector);\n      \n      // Restore the overlay\n      if (overlayElement) {\n        overlayElement.style.pointerEvents = 'auto';\n      }\n      \n      // Don't select if it's the overlay\n      if (\n        clickedElement === overlayElement || \n        (overlayElement && overlayElement.contains(clickedElement))\n      ) {\n        return;\n      }\n      \n      // Update last hovered element and trigger selection\n      lastHoveredElement.current = clickedElement;\n      onElementSelected(clickedElement);\n    },\n    [onElementSelected, ignoreList, excludeSelector]\n  );\n\n  return (\n    <div\n      className={`element-selector ${className}`}\n      data-element-selector=\"true\"\n      style={{\n        position: 'fixed',\n        inset: 0,\n        height: '100vh',\n        width: '100vw',\n        cursor: 'cell',\n        zIndex: 9999,\n        pointerEvents: 'auto',\n        ...style,\n      }}\n      onMouseMove={handleMouseMove}\n      onMouseLeave={handleMouseLeave}\n      onClick={handleMouseClick}\n      role=\"button\"\n      tabIndex={0}\n    />\n  );\n}\n","/**\n * Utility functions for DOM element inspection and manipulation\n */\n\n/**\n * Checks if a point is within an element's bounds\n * @param element - The element to check\n * @param clientX - The x coordinate\n * @param clientY - The y coordinate\n * @returns Whether the point is within the element's bounds\n */\nexport const isElementAtPoint = (\n  element: HTMLElement,\n  clientX: number,\n  clientY: number,\n): boolean => {\n  const boundingRect = element.getBoundingClientRect();\n\n  const isInHorizontalBounds =\n    clientX >= boundingRect.left &&\n    clientX <= boundingRect.left + boundingRect.width;\n  const isInVerticalBounds =\n    clientY >= boundingRect.top &&\n    clientY <= boundingRect.top + boundingRect.height;\n\n  return isInHorizontalBounds && isInVerticalBounds;\n};\n\n/**\n * Calculates the percentage offsets from a point to an element\n * @param refElement - The reference element\n * @param x - The x coordinate\n * @param y - The y coordinate\n * @returns The percentage offsets\n */\nexport function getOffsetsFromPointToElement(\n  refElement: HTMLElement,\n  x: number,\n  y: number,\n): { offsetTop: number; offsetLeft: number } {\n  const referenceClientBounds = refElement.getBoundingClientRect();\n\n  const offsetTop =\n    ((y - referenceClientBounds.top) * 100) / referenceClientBounds.height;\n  const offsetLeft =\n    ((x - referenceClientBounds.left) * 100) / referenceClientBounds.width;\n\n  return {\n    offsetTop,\n    offsetLeft,\n  };\n}\n\n/**\n * Gets the XPath for an element\n * @param element - The element to get the XPath for\n * @param useId - Whether to use the element's ID if available\n * @returns The XPath for the element\n */\nexport const getXPathForElement = (element: HTMLElement, useId = true): string => {\n  if (element.id && useId) {\n    return `//*[@id=\"${element.id}\"]`;\n  }\n\n  let nodeElem: HTMLElement | null = element;\n  const parts: string[] = [];\n  while (nodeElem && Node.ELEMENT_NODE === nodeElem.nodeType) {\n    let nbOfPreviousSiblings = 0;\n    let hasNextSiblings = false;\n    let sibling = nodeElem.previousSibling;\n    while (sibling) {\n      if (\n        sibling.nodeType !== Node.DOCUMENT_TYPE_NODE &&\n        sibling.nodeName === nodeElem.nodeName\n      ) {\n        nbOfPreviousSiblings++;\n      }\n      sibling = sibling.previousSibling;\n    }\n    sibling = nodeElem.nextSibling;\n    while (sibling) {\n      if (sibling.nodeName === nodeElem.nodeName) {\n        hasNextSiblings = true;\n        break;\n      }\n      sibling = sibling.nextSibling;\n    }\n    const prefix = nodeElem.prefix ? `${nodeElem.prefix}:` : '';\n    const nth =\n      nbOfPreviousSiblings || hasNextSiblings\n        ? `[${nbOfPreviousSiblings + 1}]`\n        : '';\n    parts.push(prefix + nodeElem.localName + nth);\n    nodeElem = nodeElem.parentElement;\n  }\n  return parts.length ? `/${parts.reverse().join('/')}` : '';\n};\n\n/**\n * Extracts relevant attributes from an HTMLElement\n * @param element - The element to get attributes from\n * @returns An object containing the element's attributes\n */\nexport function getElementAttributes(element: HTMLElement): { [key: string]: string } {\n  const attrs: { [key: string]: string } = {};\n  const priorityAttrs = [\n    'id',\n    'class',\n    'name',\n    'type',\n    'href',\n    'src',\n    'alt',\n    'for',\n    'placeholder',\n  ];\n  const dataAttrs: { name: string; value: string }[] = [];\n\n  for (let i = 0; i < element.attributes.length; i++) {\n    const attr = element.attributes[i];\n    if (attr.name.startsWith('data-')) {\n      dataAttrs.push({ name: attr.name, value: attr.value });\n    } else if (\n      priorityAttrs.includes(attr.name.toLowerCase()) ||\n      attr.name.toLowerCase() !== 'style'\n    ) {\n      attrs[attr.name] = attr.value;\n    }\n  }\n  \n  dataAttrs.forEach((da) => {\n    attrs[da.name] = da.value;\n  });\n  \n  return attrs;\n}\n\n/**\n * Generates a detailed context string for a single HTMLElement\n * @param element - The element to generate context for\n * @param index - The index of the element\n * @returns A string containing the element's context\n */\nexport function generateElementContext(element: HTMLElement, index: number): string {\n  let context = `<element index=\"${index + 1}\">\\n`;\n  context += `  <tag>${element.tagName.toLowerCase()}</tag>\\n`;\n\n  const id = element.id;\n  if (id) {\n    context += `  <id>${id}</id>\\n`;\n  }\n\n  const classes = Array.from(element.classList).join(', ');\n  if (classes) {\n    context += `  <classes>${classes}</classes>\\n`;\n  }\n\n  const attributes = getElementAttributes(element);\n  if (Object.keys(attributes).length > 0) {\n    context += `  <attributes>\\n`;\n    for (const [key, value] of Object.entries(attributes)) {\n      if (key.toLowerCase() !== 'class' || !classes) {\n        context += `    <${key}>${value}</${key}>\\n`;\n      }\n    }\n    context += `  </attributes>\\n`;\n  }\n\n  const text = element.innerText?.trim();\n  if (text) {\n    const maxLength = 100;\n    context += `  <text>${text.length > maxLength ? `${text.substring(0, maxLength)}...` : text}</text>\\n`;\n  }\n\n  context += `  <structural_context>\\n`;\n  if (element.parentElement) {\n    const parent = element.parentElement;\n    context += `    <parent>\\n`;\n    context += `      <tag>${parent.tagName.toLowerCase()}</tag>\\n`;\n    if (parent.id) {\n      context += `      <id>${parent.id}</id>\\n`;\n    }\n    const parentClasses = Array.from(parent.classList).join(', ');\n    if (parentClasses) {\n      context += `      <classes>${parentClasses}</classes>\\n`;\n    }\n    context += `    </parent>\\n`;\n  } else {\n    context += `    <parent>No parent element found (likely root or disconnected)</parent>\\n`;\n  }\n  context += `  </structural_context>\\n`;\n\n  try {\n    const styles = window.getComputedStyle(element);\n    const relevantStyles = {\n      color: styles.color,\n      backgroundColor: styles.backgroundColor,\n      fontSize: styles.fontSize,\n      fontWeight: styles.fontWeight,\n      display: styles.display,\n    };\n    context += `  <styles>\\n`;\n    for (const [key, value] of Object.entries(relevantStyles)) {\n      context += `    <${key}>${value}</${key}>\\n`;\n    }\n    context += `  </styles>\\n`;\n  } catch (e) {\n    context += `  <styles>Could not retrieve computed styles</styles>\\n`;\n  }\n\n  context += `</element>\\n`;\n  return context;\n}\n\n/**\n * Creates a prompt containing information about the selected elements\n * @param selectedElements - The selected elements\n * @param userPrompt - The user's prompt\n * @param url - The page URL\n * @returns A string containing the prompt\n */\nexport function createElementsPrompt(\n  selectedElements: HTMLElement[],\n  userPrompt: string,\n): string {\n  if (!selectedElements || selectedElements.length === 0) {\n    return `\n    <request>\n      <user_goal>${userPrompt}</user_goal>\n      <context>No specific element was selected on the page. Please analyze the page code in general or ask for clarification.</context>\n    </request>`.trim();\n  }\n\n  let detailedContext = '';\n  selectedElements.forEach((element, index) => {\n    detailedContext += generateElementContext(element, index);\n  });\n\n  return `\n<request>\n  <user_goal>${userPrompt}</user_goal>\n  <selected_elements>\n    ${detailedContext.trim()}\n  </selected_elements>\n</request>`.trim();\n}\n\n/**\n * Finds the most specific/innermost element at a given point\n * @param x - The x coordinate\n * @param y - The y coordinate\n * @param excludeSelector - CSS selector to exclude elements\n * @returns The most specific element at the point\n */\nexport function getMostSpecificElementAtPoint(\n  x: number,\n  y: number,\n  excludeSelector?: string\n): HTMLElement {\n  // Add a default exclude for the element selector itself\n  const fullExcludeSelector = excludeSelector \n    ? `${excludeSelector}, .element-selector, [data-element-selector=\"true\"]` \n    : `.element-selector, [data-element-selector=\"true\"]`;\n    \n  const elements = document.elementsFromPoint(x, y);\n  \n  // Filter out excluded elements and SVG elements\n  const eligibleElements = elements.filter(element => {\n    // Skip the element selector and any specified excludes\n    if (fullExcludeSelector && \n       (element.matches(fullExcludeSelector) || \n        element.closest(fullExcludeSelector))) {\n      return false;\n    }\n    \n    // Skip SVG elements\n    if (element.closest('svg')) {\n      return false;\n    }\n    \n    // Skip the element selector class or attribute\n    if (element.classList.contains('element-selector') || \n        element.hasAttribute('data-element-selector')) {\n      return false;\n    }\n    \n    return isElementAtPoint(element as HTMLElement, x, y);\n  }) as HTMLElement[];\n  \n  if (eligibleElements.length === 0) {\n    return document.body;\n  }\n  \n  // Sort elements by various criteria to find the most specific one\n  const sortedElements = [...eligibleElements].sort((a, b) => {\n    // 1. First check depth - deeper DOM elements are more specific\n    const aDepth = getElementDepth(a);\n    const bDepth = getElementDepth(b);\n    \n    if (aDepth !== bDepth) {\n      return bDepth - aDepth; // Higher depth is more specific\n    }\n    \n    // 2. If at same depth, prefer elements with less children\n    const aChildren = a.children.length;\n    const bChildren = b.children.length;\n    \n    if (aChildren !== bChildren) {\n      return aChildren - bChildren; // Fewer children is more specific\n    }\n    \n    // 3. If still tied, use element area\n    const aRect = a.getBoundingClientRect();\n    const bRect = b.getBoundingClientRect();\n    const aArea = aRect.width * aRect.height;\n    const bArea = bRect.width * bRect.height;\n    return aArea - bArea; // Smaller area is more specific\n  });\n  \n  // Return the most specific eligible element\n  return sortedElements[0];\n}\n\n/**\n * Helper function to calculate the depth of an element in the DOM tree\n * @param element - The element to check\n * @returns The depth of the element\n */\nfunction getElementDepth(element: HTMLElement): number {\n  let depth = 0;\n  let current = element;\n  \n  while (current.parentElement) {\n    depth++;\n    current = current.parentElement;\n  }\n  \n  return depth;\n}\n","\"use client\";\nimport React, { useCallback, useEffect, useRef } from 'react';\n\nexport interface ElementHighlighterProps {\n  /**\n   * The element to highlight\n   */\n  element: HTMLElement;\n  \n  /**\n   * CSS class for the highlighter\n   */\n  className?: string;\n  \n  /**\n   * Custom styles for the highlighter\n   */\n  style?: React.CSSProperties;\n  \n  /**\n   * Update rate in frames per second (0 to disable updates)\n   */\n  updateRate?: number;\n  \n  /**\n   * Content to render inside the highlighter\n   */\n  children?: React.ReactNode;\n  \n  /**\n   * Border color for the highlighter\n   */\n  borderColor?: string;\n  \n  /**\n   * Background color for the highlighter\n   */\n  backgroundColor?: string;\n}\n\n/**\n * A component that highlights a DOM element with a border\n */\nexport function ElementHighlighter({\n  element,\n  className = '',\n  style = {},\n  updateRate = 30,\n  children,\n  borderColor = 'rgba(59, 130, 246, 0.8)',\n  backgroundColor = 'rgba(59, 130, 246, 0.2)',\n}: ElementHighlighterProps) {\n  const boxRef = useRef<HTMLDivElement>(null);\n  const updateIntervalRef = useRef<number | null>(null);\n\n  const updateBoxPosition = useCallback(() => {\n    if (boxRef.current && element) {\n      const referenceRect = element.getBoundingClientRect();\n\n      boxRef.current.style.top = `${referenceRect.top - 2}px`;\n      boxRef.current.style.left = `${referenceRect.left - 2}px`;\n      boxRef.current.style.width = `${referenceRect.width + 4}px`;\n      boxRef.current.style.height = `${referenceRect.height + 4}px`;\n    }\n  }, [element]);\n\n  // Set up the interval for updating the box position\n  useEffect(() => {\n    updateBoxPosition();\n    \n    if (updateRate > 0) {\n      const intervalId = window.setInterval(() => {\n        updateBoxPosition();\n      }, 1000 / updateRate);\n      \n      updateIntervalRef.current = intervalId;\n      \n      return () => {\n        if (updateIntervalRef.current !== null) {\n          window.clearInterval(updateIntervalRef.current);\n        }\n      };\n    }\n  }, [updateBoxPosition, updateRate]);\n\n  // Also update on window resize\n  useEffect(() => {\n    const handleResize = () => {\n      updateBoxPosition();\n    };\n    \n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [updateBoxPosition]);\n\n  return (\n    <div\n      className={`element-highlighter ${className}`}\n      style={{\n        position: 'fixed',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        borderRadius: '4px',\n        border: `2px solid ${borderColor}`,\n        backgroundColor,\n        transition: 'all 100ms',\n        zIndex: 9998,\n        pointerEvents: 'none',\n        ...style,\n      }}\n      ref={boxRef}\n    >\n      {children}\n    </div>\n  );\n}\n","\"use client\";\nimport React, { useCallback, useState, useEffect } from 'react';\nimport { ElementHighlighter } from './ElementHighlighter';\nimport { ElementSelector } from './ElementSelector';\nimport { createElementsPrompt } from './utils';\nimport { IconX } from './Icons';\nimport { layout, buttons, text, darkMode } from './styles';\nimport { ElementTagLabel, BubbleMenuButton, InspectorToggle, PromptForm } from './components';\n\nexport interface ElementInspectorProps {\n  /**\n   * Initial state of the inspector (active or not)\n   */\n  initialIsActive?: boolean;\n  \n  /**\n   * CSS selector for elements to exclude from selection\n   */\n  excludeSelector?: string;\n  \n  /**\n   * Maximum number of elements that can be selected\n   */\n  maxElements?: number;\n  \n  /**\n   * Custom label for selected elements\n   */\n  elementLabel?: (element: HTMLElement) => React.ReactNode;\n  \n  /**\n   * Custom styles for the selector\n   */\n  selectorStyle?: React.CSSProperties;\n  \n  /**\n   * Custom styles for the highlighter\n   */\n  highlighterStyle?: React.CSSProperties;\n}\n\n/**\n * A component that allows inspecting and selecting DOM elements with a UI for interaction\n */\nexport function ElementInspector({\n  initialIsActive = false,\n  excludeSelector = '.element-inspector-bubble, .element-inspector-controls',\n  elementLabel,\n  selectorStyle,\n  highlighterStyle,\n  maxElements = 5,\n}: ElementInspectorProps) {\n  // State hooks\n  const [isInspecting, setIsInspecting] = useState(initialIsActive);\n  const [hoveredElement, setHoveredElement] = useState<HTMLElement | null>(null);\n  const [selectedElements, setSelectedElements] = useState<HTMLElement[]>([]);\n  const [userPrompt, setUserPrompt] = useState('');\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  \n  // Check for dark mode on component mount\n  useEffect(() => {\n    const isDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\n    setIsDarkMode(isDark);\n    \n    // Listen for changes in color scheme\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = (e: MediaQueryListEvent) => setIsDarkMode(e.matches);\n    mediaQuery.addEventListener('change', handleChange);\n    \n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, []);\n  \n  // Element selection handlers\n  const handleElementsSelected = useCallback((elements: HTMLElement[]) => {\n    setSelectedElements(elements);\n  }, []);\n\n  const handleElementHovered = useCallback((element: HTMLElement) => {\n    setHoveredElement(element);\n  }, []);\n\n  const handleElementUnhovered = useCallback(() => {\n    setHoveredElement(null);\n  }, []);\n  \n  // Prompt generation handler\n  const onPromptGenerated = useCallback((prompt: string, elements: HTMLElement[]) => {\n    console.log('Generated prompt:', prompt);\n    \n    // Create a custom event for local handlers\n    const promptEvent = new CustomEvent('promptGenerated', {\n      detail: { prompt, elements }\n    });\n    document.dispatchEvent(promptEvent);\n    \n    // Check if component is inside an iframe by comparing window and parent\n    const isInIframe = window.self !== window.top;\n    if (isInIframe) {\n      // Send a postMessage to the parent window\n      window.parent.postMessage({\n        type: 'ELEMENT_INSPECTOR_PROMPT',\n        payload: {\n          prompt,\n          elements: elements.map(el => ({\n            tagName: el.tagName,\n            id: el.id,\n            className: el.className,\n            textContent: el.textContent?.trim(),\n            attributes: Array.from(el.attributes).map(attr => ({\n              name: attr.name,\n              value: attr.value\n            }))\n          }))\n        }\n      }, '*');\n      console.log('Sent postMessage to parent window');\n    }\n  }, []);\n  \n  // UI interaction handlers\n  const toggleInspection = useCallback(() => {\n    setIsInspecting(!isInspecting);\n    if (isInspecting) {\n      setSelectedElements([]);\n    }\n  }, [isInspecting]);\n\n  const handleMenuToggle = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n    setIsInspecting(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handlePromptSubmit = useCallback((e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (selectedElements.length > 0 && userPrompt) {\n      // Generate the prompt based on selected elements and user input\n      const prompt = createElementsPrompt(\n        selectedElements,\n        userPrompt,\n      );\n      \n      // Call the onPromptGenerated callback\n      onPromptGenerated(prompt, selectedElements);\n      \n      // Clear the input field after submission\n      setUserPrompt('');\n    }\n  }, [selectedElements, userPrompt, onPromptGenerated]);\n\n  // Handle escape key to exit inspection mode\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === 'Escape' && isInspecting) {\n        setIsInspecting(false);\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [isInspecting]);\n  \n  const elementSelectorProps = {\n    onElementHovered: handleElementHovered,\n    onElementSelected: (element: HTMLElement) => {\n      const isElementSelected = selectedElements.includes(element);\n      \n      // If element is already selected, remove it\n      if (isElementSelected) {\n        const newSelectedElements = selectedElements.filter(el => el !== element);\n        handleElementsSelected(newSelectedElements);\n      } \n      // If element is not selected and we haven't reached max limit, add it\n      else if (selectedElements.length < maxElements) {\n        const newSelectedElements = [...selectedElements, element];\n        handleElementsSelected(newSelectedElements);\n      }\n      // If we've reached the limit and trying to add another element, don't add it\n      // Could add a visual feedback here if needed\n    },\n    onElementUnhovered: handleElementUnhovered,\n    ignoreList: selectedElements,\n    excludeSelector,\n    style: selectorStyle,\n  };\n\n  return (\n    <div>\n      {/* Element Inspector Component */}\n      {isInspecting && (\n        <>\n          {/* Element selection overlay */}\n          <ElementSelector {...elementSelectorProps} />\n          \n          {/* Highlight for hovered element */}\n          {hoveredElement && (\n            <ElementHighlighter \n              element={hoveredElement}\n              borderColor=\"rgba(59, 130, 246, 0.8)\"\n              backgroundColor=\"rgba(59, 130, 246, 0.2)\"\n              style={highlighterStyle}\n            >\n              {elementLabel ? elementLabel(hoveredElement) : <ElementTagLabel element={hoveredElement} />}\n            </ElementHighlighter>\n          )}\n          \n          {/* Highlights for selected elements */}\n          {selectedElements.map((element, index) => (\n            <ElementHighlighter\n              key={`selected-${index}`}\n              element={element}\n              borderColor=\"rgba(34, 197, 94, 0.8)\"\n              backgroundColor=\"rgba(34, 197, 94, 0.2)\"\n              style={highlighterStyle}\n            >\n              {elementLabel ? elementLabel(element) : <ElementTagLabel element={element} />}\n            </ElementHighlighter>\n          ))}\n        </>\n      )}\n\n      {/* Bubble Menu */}\n      <div \n        className=\"element-inspector-bubble element-inspector-controls\"\n        style={layout.bubble}\n      >\n        {/* Main Menu Button */}\n        <BubbleMenuButton isOpen={isMenuOpen} onClick={handleMenuToggle} />\n\n        {/* Expanded Menu */}\n        {(isMenuOpen || isInspecting) && (\n          <div \n            className=\"element-inspector-controls\"\n            style={{\n              ...layout.expandedMenu,\n              ...(isDarkMode ? darkMode.expandedMenu : {})\n            }}\n          >\n            {/* Header with Close Button */}\n            <div \n              className=\"element-inspector-controls\"\n              style={layout.menuHeader}\n            >\n              <h3 \n                style={{\n                  ...text.menuTitle,\n                  ...(isDarkMode ? darkMode.menuTitle : {})\n                }}\n              >\n                Element Inspector\n              </h3>\n              <button \n                onClick={handleMenuToggle}\n                style={{\n                  ...buttons.closeButton,\n                }}\n                onMouseOver={(e) => {\n                  e.currentTarget.style.color = isDarkMode \n                    ? darkMode.closeButtonHover.color \n                    : buttons.closeButtonHover.color;\n                }}\n                onMouseOut={(e) => {\n                  e.currentTarget.style.color = buttons.closeButton.color;\n                }}\n                aria-label=\"Close menu\"\n                className=\"element-inspector-controls\"\n              >\n                <IconX />\n              </button>\n            </div>\n          \n            {/* Inspector Toggle */}\n            <InspectorToggle \n              isInspecting={isInspecting}\n              selectedCount={selectedElements.length}\n              toggleInspection={toggleInspection}\n              isDarkMode={isDarkMode}\n              maxElements={maxElements}\n            />\n            \n            {/* Prompt Input */}\n            <PromptForm\n              userPrompt={userPrompt}\n              setUserPrompt={setUserPrompt}\n              handlePromptSubmit={handlePromptSubmit}\n              selectedElementsCount={selectedElements.length}\n              isDarkMode={isDarkMode}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","\"use client\";\n\n// Custom icon components\nexport const IconPointer = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"lucide lucide-mouse-pointer-click-icon lucide-mouse-pointer-click\"><path d=\"M14 4.1 12 6\"/><path d=\"m5.1 8-2.9-.8\"/><path d=\"m6 12-1.9 2\"/><path d=\"M7.2 2.2 8 5.1\"/><path d=\"M9.037 9.69a.498.498 0 0 1 .653-.653l11 4.5a.5.5 0 0 1-.074.949l-4.349 1.041a1 1 0 0 0-.74.739l-1.04 4.35a.5.5 0 0 1-.95.074z\"/></svg>\n);\n\nexport const IconSquareDashedPointer = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"lucide lucide-square-dashed-mouse-pointer-icon lucide-square-dashed-mouse-pointer\"><path d=\"M12.034 12.681a.498.498 0 0 1 .647-.647l9 3.5a.5.5 0 0 1-.033.943l-3.444 1.068a1 1 0 0 0-.66.66l-1.067 3.443a.5.5 0 0 1-.943.033z\"/><path d=\"M5 3a2 2 0 0 0-2 2\"/><path d=\"M19 3a2 2 0 0 1 2 2\"/><path d=\"M5 21a2 2 0 0 1-2-2\"/><path d=\"M9 3h1\"/><path d=\"M9 21h2\"/><path d=\"M14 3h1\"/><path d=\"M3 9v1\"/><path d=\"M21 9v2\"/><path d=\"M3 14v1\"/></svg>\n);\n\nexport const IconX = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n    <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\n    <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\n  </svg>\n);\n\nexport const IconSend = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n    <path d=\"m22 2-7 20-4-9-9-4Z\"/>\n    <path d=\"M22 2 11 13\"/>\n  </svg>\n);\n","// Styles for the ElementInspector component\n\n// Layout styles\nexport const layout = {\n  bubble: {\n    position: 'fixed' as const,\n    bottom: '24px',\n    right: '24px',\n    zIndex: 9999,\n  },\n  expandedMenu: {\n    position: 'absolute' as const,\n    bottom: '64px',\n    right: '0',\n    backgroundColor: 'white',\n    borderRadius: '8px',\n    boxShadow: '0 4px 20px rgba(0, 0, 0, 0.15)',\n    padding: '16px',\n    width: '350px',\n    transition: 'all 0.2s ease',\n  },\n  menuHeader: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: '12px',\n  },\n  inspectorToggle: {\n    marginBottom: '16px',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n  toggleLeft: {\n    display: 'flex',\n    alignItems: 'center',\n    gap: '8px',\n  },\n  toggleRight: {\n    display: 'flex',\n    alignItems: 'center',\n    gap: '8px',\n  },\n  promptForm: {\n    marginTop: '12px',\n  },\n  inputContainer: {\n    display: 'flex',\n  },\n};\n\n// Button styles\nexport const buttons = {\n  mainButton: {\n    backgroundColor: '#3b82f6',\n    color: 'white',\n    padding: '12px',\n    borderRadius: '50%',\n    boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n    border: 'none',\n    cursor: 'pointer',\n    transition: 'all 0.2s ease',\n  },\n  mainButtonHover: {\n    backgroundColor: '#2563eb',\n  },\n  closeButton: {\n    color: '#6b7280',\n    background: 'none',\n    border: 'none',\n    cursor: 'pointer',\n    padding: '4px',\n  },\n  closeButtonHover: {\n    color: '#374151',\n  },\n  toggleButton: {\n    padding: '4px 12px',\n    borderRadius: '9999px',\n    fontSize: '12px',\n    fontWeight: '500',\n    border: 'none',\n    cursor: 'pointer',\n    transition: 'colors 0.2s ease',\n  },\n  submitButton: {\n    backgroundColor: '#3b82f6',\n    color: 'white',\n    padding: '8px 12px',\n    borderTopRightRadius: '6px',\n    borderBottomRightRadius: '6px',\n    border: 'none',\n    cursor: 'pointer',\n    transition: 'background-color 0.2s ease',\n  },\n  submitButtonHover: {\n    backgroundColor: '#2563eb',\n  },\n};\n\n// Text styles\nexport const text = {\n  menuTitle: {\n    fontSize: '14px',\n    fontWeight: '500',\n    color: '#1f2937',\n  },\n  toggleText: {\n    fontSize: '14px',\n    fontWeight: '500',\n    color: '#374151',\n  },\n  selectedCount: {\n    fontSize: '12px',\n    fontWeight: '500',\n    color: '#10b981',\n  },\n  promptLabel: {\n    display: 'block',\n    fontSize: '14px',\n    fontWeight: '500',\n    color: '#374151',\n    marginBottom: '4px',\n  },\n};\n\n// Input styles\nexport const inputs = {\n  promptInput: {\n    flexGrow: 1,\n    padding: '8px',\n    fontSize: '14px',\n    border: '1px solid #d1d5db',\n    borderTopLeftRadius: '6px',\n    borderBottomLeftRadius: '6px',\n    outline: 'none',\n    borderColor: '#d1d5db',\n  },\n  promptInputFocus: {\n    borderColor: '#3b82f6',\n    boxShadow: '0 0 0 1px rgba(59, 130, 246, 0.5)',\n  },\n  promptInputSelected: {\n    borderColor: '#10b981',\n  },\n};\n\n// Element styles\nexport const elements = {\n  elementTagLabel: {\n    position: 'absolute' as const,\n    top: '0.5px',\n    left: '0.5px',\n    backgroundColor: 'rgba(52, 53, 65, 0.8)',\n    borderRadius: '4px',\n    padding: '2px 6px',\n    fontSize: '12px',\n    color: 'white',\n    pointerEvents: 'none' as const,\n  },\n};\n\n// State styles\nexport const states = {\n  toggleButtonActive: {\n    backgroundColor: '#dcfce7',\n    color: '#065f46',\n  },\n  toggleButtonInactive: {\n    backgroundColor: '#f3f4f6',\n    color: '#1f2937',\n  },\n};\n\n// Dark mode styles\nexport const darkMode = {\n  expandedMenu: {\n    backgroundColor: '#1f2937',\n  },\n  menuTitle: {\n    color: '#e5e7eb',\n  },\n  closeButtonHover: {\n    color: '#e5e7eb',\n  },\n  toggleText: {\n    color: '#e5e7eb',\n  },\n  selectedCount: {\n    color: '#34d399',\n  },\n  toggleButtonActive: {\n    backgroundColor: '#064e3b',\n    color: '#ecfdf5',\n  },\n  toggleButtonInactive: {\n    backgroundColor: '#374151',\n    color: '#d1d5db',\n  },\n  promptLabel: {\n    color: '#d1d5db',\n  },\n  promptInput: {\n    backgroundColor: '#374151',\n    color: 'white',\n    borderColor: '#4b5563',\n  },\n};\n","import React from 'react';\nimport { elements } from './styles';\nimport { IconPointer, IconSquareDashedPointer, IconX, IconSend } from './Icons';\nimport { layout, buttons, text, inputs, states, darkMode } from './styles';\n\n// Element Tag Label component\nexport const ElementTagLabel = ({ element }: { element: HTMLElement }) => (\n  <div style={elements.elementTagLabel}>\n    {element.tagName.toLowerCase()}\n  </div>\n);\n\n// Bubble Menu Button component\nexport const BubbleMenuButton = ({ isOpen, onClick }: { isOpen: boolean; onClick: () => void }) => (\n  <button\n    onClick={onClick}\n    style={buttons.mainButton}\n    onMouseOver={(e) => {\n      e.currentTarget.style.backgroundColor = buttons.mainButtonHover.backgroundColor;\n    }}\n    onMouseOut={(e) => {\n      e.currentTarget.style.backgroundColor = buttons.mainButton.backgroundColor;\n    }}\n    title=\"Element Inspector\"\n    className=\"element-inspector-controls\"\n  >\n    {isOpen ? <IconX /> : <IconSquareDashedPointer />}\n  </button>\n);\n\n// Inspector Toggle component\nexport const InspectorToggle = ({ \n  isInspecting, \n  selectedCount, \n  toggleInspection,\n  isDarkMode,\n  maxElements = 5 \n}: { \n  isInspecting: boolean; \n  selectedCount: number;\n  toggleInspection: () => void;\n  isDarkMode: boolean;\n  maxElements?: number;\n}) => (\n  <div \n    className=\"element-inspector-controls\"\n    style={layout.inspectorToggle}\n  >\n    <div \n      className=\"element-inspector-controls\"\n      style={layout.toggleLeft}\n    >\n      <IconPointer />\n      <span \n        style={{\n          ...text.toggleText,\n          ...(isDarkMode ? darkMode.toggleText : {})\n        }}\n      >\n        Inspection Mode\n      </span>\n    </div>\n    <div style={layout.toggleRight}>\n      {selectedCount > 0 && (\n        <span \n          style={{\n            ...text.selectedCount,\n            ...(isDarkMode ? darkMode.selectedCount : {})\n          }}\n        >\n          {selectedCount}/{maxElements} selected\n        </span>\n      )}\n      <button\n        onClick={toggleInspection}\n        style={{\n          ...buttons.toggleButton,\n          ...(isInspecting \n            ? (isDarkMode ? {...darkMode.toggleButtonActive} : {...states.toggleButtonActive})\n            : (isDarkMode ? {...darkMode.toggleButtonInactive} : {...states.toggleButtonInactive})\n          )\n        }}\n        className=\"element-inspector-controls\"\n      >\n        {isInspecting ? 'Active' : 'Inactive'}\n      </button>\n    </div>\n  </div>\n);\n\n// Prompt Form component\nexport const PromptForm = ({ \n  userPrompt, \n  setUserPrompt, \n  handlePromptSubmit, \n  selectedElementsCount,\n  isDarkMode \n}: { \n  userPrompt: string; \n  setUserPrompt: (value: string) => void;\n  handlePromptSubmit: (e: React.FormEvent) => void;\n  selectedElementsCount: number;\n  isDarkMode: boolean;\n}) => (\n  <form \n    onSubmit={handlePromptSubmit} \n    style={layout.promptForm}\n    className=\"element-inspector-controls\"\n  >\n    <label \n      style={{\n        ...text.promptLabel,\n        ...(isDarkMode ? darkMode.promptLabel : {})\n      }}\n      className=\"element-inspector-controls\"\n    >\n      Prompt\n    </label>\n    <div \n      style={layout.inputContainer}\n      className=\"element-inspector-controls\"\n    >\n      <input\n        type=\"text\"\n        value={userPrompt}\n        onChange={(e) => setUserPrompt(e.target.value)}\n        style={{\n          ...inputs.promptInput,\n          ...(isDarkMode ? darkMode.promptInput : {}),\n          ...(selectedElementsCount > 0 ? inputs.promptInputSelected : {})\n        }}\n        onFocus={(e) => {\n          e.currentTarget.style.boxShadow = inputs.promptInputFocus.boxShadow;\n          e.currentTarget.style.borderColor = inputs.promptInputFocus.borderColor;\n        }}\n        onBlur={(e) => {\n          e.currentTarget.style.boxShadow = 'none';\n          e.currentTarget.style.borderColor = selectedElementsCount > 0 \n            ? inputs.promptInputSelected.borderColor \n            : isDarkMode ? darkMode.promptInput.borderColor : inputs.promptInput.borderColor;\n        }}\n        placeholder={selectedElementsCount > 0 \n          ? `Enter prompt for ${selectedElementsCount} selected element(s)` \n          : \"Select elements first\"}\n        className=\"element-inspector-controls\"\n      />\n      <button\n        type=\"submit\"\n        style={buttons.submitButton}\n        onMouseOver={(e) => {\n          e.currentTarget.style.backgroundColor = buttons.submitButtonHover.backgroundColor;\n        }}\n        onMouseOut={(e) => {\n          e.currentTarget.style.backgroundColor = buttons.submitButton.backgroundColor;\n        }}\n        className=\"element-inspector-controls\"\n      >\n        <IconSend />\n      </button>\n    </div>\n  </form>\n);\n","/**\n * Types and utilities for creating structured prompts with element context\n */\n\n/**\n * A context snippet that can be added to a prompt.\n */\nexport interface ContextSnippet {\n  /**\n   * The name of the context in the prompt\n   */\n  promptContextName: string;\n  \n  /**\n   * The content of the context, either as a string or a function that returns a string or Promise<string>\n   */\n  content: string | (() => string | Promise<string>);\n}\n\n/**\n * A plugin's context snippets\n */\nexport interface PluginContextSnippets {\n  /**\n   * The name of the plugin\n   */\n  pluginName: string;\n  \n  /**\n   * The context snippets provided by the plugin\n   */\n  contextSnippets: ContextSnippet[];\n}\n\n/**\n * Creates a comprehensive prompt for an AI model with element context\n * \n * @param selectedElements - The selected DOM elements\n * @param userPrompt - The user's prompt text\n * @param url - The current page URL\n * @param contextSnippets - Optional additional context snippets from plugins\n * @returns A formatted XML-style prompt\n */\nexport function createPromptWithPlugins(\n  selectedElements: HTMLElement[],\n  userPrompt: string,\n  url: string,\n  contextSnippets: PluginContextSnippets[] = []\n): string {\n  // Format plugin context if provided\n  const pluginContext = contextSnippets.length > 0\n    ? contextSnippets\n        .map((snippet) => `\n        <plugin_contexts>\n<${snippet.pluginName}>\n${snippet.contextSnippets.map((snippet) => `    <${snippet.promptContextName}>${typeof snippet.content === 'function' ? snippet.content() : snippet.content}</${snippet.promptContextName}>`).join('\\n')}\n</${snippet.pluginName}>\n</plugin_contexts>\n        `.trim())\n        .join('\\n')\n    : '';\n\n  // Handle case with no selected elements\n  if (!selectedElements || selectedElements.length === 0) {\n    return `\n    <request>\n      <user_goal>${userPrompt}</user_goal>\n      <url>${url}</url>\n      <context>No specific element was selected on the page. Please analyze the page code in general or ask for clarification.</context>\n      ${pluginContext}\n    </request>`.trim();\n  }\n\n  // Generate context for each selected element\n  let detailedContext = '';\n  selectedElements.forEach((element, index) => {\n    detailedContext += generateElementContext(element, index);\n  });\n\n  return `\n<request>\n  <user_goal>${userPrompt}</user_goal>\n  <url>${url}</url>\n  <selected_elements>\n    ${detailedContext.trim()}\n  </selected_elements>\n  ${pluginContext}\n</request>`.trim();\n}\n\n/**\n * Gets the attributes of an element that are relevant for context\n */\nexport function getElementAttributes(element: HTMLElement): { [key: string]: string } {\n  const attrs: { [key: string]: string } = {};\n  const priorityAttrs = [\n    'id',\n    'class',\n    'name',\n    'type',\n    'href',\n    'src',\n    'alt',\n    'for',\n    'placeholder',\n  ];\n  const dataAttrs: Array<{ name: string; value: string }> = [];\n\n  for (let i = 0; i < element.attributes.length; i++) {\n    const attr = element.attributes[i];\n    if (attr.name.startsWith('data-')) {\n      dataAttrs.push({ name: attr.name, value: attr.value });\n    } else if (\n      priorityAttrs.includes(attr.name.toLowerCase()) ||\n      attr.name.toLowerCase() !== 'style'\n    ) {\n      attrs[attr.name] = attr.value;\n    }\n  }\n  \n  dataAttrs.forEach((da) => {\n    attrs[da.name] = da.value;\n  });\n  \n  return attrs;\n}\n\n/**\n * Generates detailed XML context for a DOM element\n */\nexport function generateElementContext(element: HTMLElement, index: number): string {\n  let context = `<element index=\"${index + 1}\">\\n`;\n  context += `  <tag>${element.tagName.toLowerCase()}</tag>\\n`;\n\n  const id = element.id;\n  if (id) {\n    context += `  <id>${id}</id>\\n`;\n  }\n\n  const classes = Array.from(element.classList).join(', ');\n  if (classes) {\n    context += `  <classes>${classes}</classes>\\n`;\n  }\n\n  const attributes = getElementAttributes(element);\n  if (Object.keys(attributes).length > 0) {\n    context += `  <attributes>\\n`;\n    for (const [key, value] of Object.entries(attributes)) {\n      if (key.toLowerCase() !== 'class' || !classes) {\n        context += `    <${key}>${value}</${key}>\\n`;\n      }\n    }\n    context += `  </attributes>\\n`;\n  }\n\n  const text = element.innerText?.trim();\n  if (text) {\n    const maxLength = 100;\n    context += `  <text>${text.length > maxLength ? `${text.substring(0, maxLength)}...` : text}</text>\\n`;\n  }\n\n  context += `  <structural_context>\\n`;\n  if (element.parentElement) {\n    const parent = element.parentElement;\n    context += `    <parent>\\n`;\n    context += `      <tag>${parent.tagName.toLowerCase()}</tag>\\n`;\n    if (parent.id) {\n      context += `      <id>${parent.id}</id>\\n`;\n    }\n    const parentClasses = Array.from(parent.classList).join(', ');\n    if (parentClasses) {\n      context += `      <classes>${parentClasses}</classes>\\n`;\n    }\n    context += `    </parent>\\n`;\n  } else {\n    context += `    <parent>No parent element found (likely root or disconnected)</parent>\\n`;\n  }\n  context += `  </structural_context>\\n`;\n\n  try {\n    const styles = window.getComputedStyle(element);\n    const relevantStyles = {\n      color: styles.color,\n      backgroundColor: styles.backgroundColor,\n      fontSize: styles.fontSize,\n      fontWeight: styles.fontWeight,\n      display: styles.display,\n    };\n    context += `  <styles>\\n`;\n    for (const [key, value] of Object.entries(relevantStyles)) {\n      context += `    <${key}>${value}</${key}>\\n`;\n    }\n    context += `  </styles>\\n`;\n  } catch (e) {\n    context += `  <styles>Could not retrieve computed styles</styles>\\n`;\n  }\n\n  context += `</element>\\n`;\n  return context;\n}\n"],"mappings":"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","names":["text","elements","useCallback","useRef","jsx","useCallback","useEffect","jsx","jsx","jsxs","jsx","jsxs","useEffect","useCallback","elements","snippet","generateElementContext","getElementAttributes","text"]}