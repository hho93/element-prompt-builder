{"version":3,"sources":["../src/ElementSelector.tsx","../src/utils.ts","../src/ElementHighlighter.tsx","../src/ElementInspector.tsx","../src/prompting.ts"],"sourcesContent":["\"use client\";\nimport React, { useCallback, useRef } from 'react';\nimport { getElementAtPoint, getMostSpecificElementAtPoint } from './utils';\n\nexport interface ElementSelectorProps {\n  /**\n   * Callback when an element is hovered\n   */\n  onElementHovered: (element: HTMLElement) => void;\n  \n  /**\n   * Callback when an element is no longer hovered\n   */\n  onElementUnhovered: () => void;\n  \n  /**\n   * Callback when an element is selected\n   */\n  onElementSelected: (element: HTMLElement) => void;\n  \n  /**\n   * List of elements to ignore during selection\n   */\n  ignoreList?: HTMLElement[];\n  \n  /**\n   * CSS selector for elements to exclude\n   */\n  excludeSelector?: string;\n  \n  /**\n   * CSS class name for the selector overlay\n   */\n  className?: string;\n  \n  /**\n   * Custom styles for the selector overlay\n   */\n  style?: React.CSSProperties;\n  \n  /**\n   * Whether to use basic selection instead of most specific element selection\n   */\n  useBasicSelection?: boolean;\n  \n  /**\n   * Key code to toggle basic/advanced selection mode (default: 'Alt')\n   */\n  selectionModeToggleKey?: string;\n}\n\n/**\n * ElementSelector component that creates an overlay to select DOM elements\n */\nexport function ElementSelector({\n  onElementHovered,\n  onElementUnhovered,\n  onElementSelected,\n  ignoreList = [],\n  excludeSelector = '',\n  className = '',\n  style = {},\n  useBasicSelection = false,\n  selectionModeToggleKey = 'Alt',\n}: ElementSelectorProps) {\n  const lastHoveredElement = useRef<HTMLElement | null>(null);\n  const [isUsingBasicSelection, setIsUsingBasicSelection] = React.useState(useBasicSelection);\n\n  // Handle key down/up for the selection mode toggle\n  React.useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.key === selectionModeToggleKey) {\n        setIsUsingBasicSelection(true);\n      }\n    };\n    \n    const handleKeyUp = (e: KeyboardEvent) => {\n      if (e.key === selectionModeToggleKey) {\n        setIsUsingBasicSelection(false);\n      }\n    };\n    \n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n    \n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [selectionModeToggleKey]);\n\n  const handleMouseMove = useCallback(\n    (event: React.MouseEvent<HTMLDivElement>) => {\n      const { clientX, clientY } = event;\n      \n      // Hide the overlay temporarily to get accurate element detection\n      const overlayElement = event.currentTarget;\n      if (overlayElement) {\n        overlayElement.style.pointerEvents = 'none';\n      }\n      \n      // Get element at this point (with overlay hidden)\n      const refElement = isUsingBasicSelection \n        ? getElementAtPoint(clientX, clientY, excludeSelector)\n        : getMostSpecificElementAtPoint(clientX, clientY, excludeSelector);\n      \n      // Restore the overlay\n      if (overlayElement) {\n        overlayElement.style.pointerEvents = 'auto';\n      }\n      \n      // Ignore if element is in the ignore list\n      if (ignoreList.includes(refElement)) return;\n      \n      // Ignore if element is the overlay itself or a child of it\n      if (refElement === overlayElement || \n          (overlayElement && overlayElement.contains(refElement))) {\n        return;\n      }\n      \n      // Only trigger callback if the hovered element has changed\n      if (lastHoveredElement.current !== refElement) {\n        lastHoveredElement.current = refElement;\n        onElementHovered(refElement);\n      }\n    },\n    [onElementHovered, ignoreList, excludeSelector, isUsingBasicSelection]\n  );\n\n  const handleMouseLeave = useCallback(() => {\n    lastHoveredElement.current = null;\n    onElementUnhovered();\n  }, [onElementUnhovered]);\n\n  const handleMouseClick = useCallback(\n    (event: React.MouseEvent<HTMLDivElement>) => {\n      // Prevent the default action and stop propagation\n      event.preventDefault();\n      event.stopPropagation();\n      \n      const { clientX, clientY } = event;\n      \n      // Hide the overlay temporarily to get accurate element detection\n      const overlayElement = event.currentTarget;\n      if (overlayElement) {\n        overlayElement.style.pointerEvents = 'none';\n      }\n      \n      // Get the most accurate element at click position\n      const clickedElement = isUsingBasicSelection\n        ? getElementAtPoint(clientX, clientY, excludeSelector)\n        : getMostSpecificElementAtPoint(clientX, clientY, excludeSelector);\n      \n      // Restore the overlay\n      if (overlayElement) {\n        overlayElement.style.pointerEvents = 'auto';\n      }\n      \n      // Don't select if it's the overlay\n      if (\n        clickedElement === overlayElement || \n        (overlayElement && overlayElement.contains(clickedElement))\n      ) {\n        return;\n      }\n      \n      // Update last hovered element and trigger selection\n      lastHoveredElement.current = clickedElement;\n      onElementSelected(clickedElement);\n    },\n    [onElementSelected, ignoreList, excludeSelector, isUsingBasicSelection]\n  );\n\n  return (\n    <div\n      className={`element-selector ${className}`}\n      data-element-selector=\"true\"\n      style={{\n        position: 'fixed',\n        inset: 0,\n        height: '100vh',\n        width: '100vw',\n        cursor: isUsingBasicSelection ? 'crosshair' : 'cell',\n        zIndex: 9999,\n        pointerEvents: 'auto',\n        ...style,\n      }}\n      onMouseMove={handleMouseMove}\n      onMouseLeave={handleMouseLeave}\n      onClick={handleMouseClick}\n      role=\"button\"\n      tabIndex={0}\n    >\n      {isUsingBasicSelection && (\n        <div style={{\n          position: 'fixed',\n          bottom: '10px',\n          right: '10px',\n          backgroundColor: 'rgba(0, 0, 0, 0.7)',\n          color: 'white',\n          padding: '5px 10px',\n          borderRadius: '4px',\n          fontSize: '12px',\n          pointerEvents: 'none'\n        }}>\n          Basic Selection Mode (Press Alt to toggle)\n        </div>\n      )}\n    </div>\n  );\n}\n","/**\n * Utility functions for DOM element inspection and manipulation\n */\n\n/**\n * Gets the element at the specified point, excluding specific elements\n * @param x - The x coordinate\n * @param y - The y coordinate\n * @param excludeSelector - CSS selector to exclude elements\n * @returns The element at the specified point\n * @deprecated Use getMostSpecificElementAtPoint for better element selection\n */\nexport function getElementAtPoint(\n  x: number, \n  y: number, \n  excludeSelector?: string\n): HTMLElement {\n  // This function is now a wrapper around getMostSpecificElementAtPoint\n  // for backward compatibility\n  return getMostSpecificElementAtPoint(x, y, excludeSelector);\n}\n\n/**\n * Checks if a point is within an element's bounds\n * @param element - The element to check\n * @param clientX - The x coordinate\n * @param clientY - The y coordinate\n * @returns Whether the point is within the element's bounds\n */\nexport const isElementAtPoint = (\n  element: HTMLElement,\n  clientX: number,\n  clientY: number,\n): boolean => {\n  const boundingRect = element.getBoundingClientRect();\n\n  const isInHorizontalBounds =\n    clientX >= boundingRect.left &&\n    clientX <= boundingRect.left + boundingRect.width;\n  const isInVerticalBounds =\n    clientY >= boundingRect.top &&\n    clientY <= boundingRect.top + boundingRect.height;\n\n  return isInHorizontalBounds && isInVerticalBounds;\n};\n\n/**\n * Calculates the percentage offsets from a point to an element\n * @param refElement - The reference element\n * @param x - The x coordinate\n * @param y - The y coordinate\n * @returns The percentage offsets\n */\nexport function getOffsetsFromPointToElement(\n  refElement: HTMLElement,\n  x: number,\n  y: number,\n): { offsetTop: number; offsetLeft: number } {\n  const referenceClientBounds = refElement.getBoundingClientRect();\n\n  const offsetTop =\n    ((y - referenceClientBounds.top) * 100) / referenceClientBounds.height;\n  const offsetLeft =\n    ((x - referenceClientBounds.left) * 100) / referenceClientBounds.width;\n\n  return {\n    offsetTop,\n    offsetLeft,\n  };\n}\n\n/**\n * Gets the XPath for an element\n * @param element - The element to get the XPath for\n * @param useId - Whether to use the element's ID if available\n * @returns The XPath for the element\n */\nexport const getXPathForElement = (element: HTMLElement, useId = true): string => {\n  if (element.id && useId) {\n    return `//*[@id=\"${element.id}\"]`;\n  }\n\n  let nodeElem: HTMLElement | null = element;\n  const parts: string[] = [];\n  while (nodeElem && Node.ELEMENT_NODE === nodeElem.nodeType) {\n    let nbOfPreviousSiblings = 0;\n    let hasNextSiblings = false;\n    let sibling = nodeElem.previousSibling;\n    while (sibling) {\n      if (\n        sibling.nodeType !== Node.DOCUMENT_TYPE_NODE &&\n        sibling.nodeName === nodeElem.nodeName\n      ) {\n        nbOfPreviousSiblings++;\n      }\n      sibling = sibling.previousSibling;\n    }\n    sibling = nodeElem.nextSibling;\n    while (sibling) {\n      if (sibling.nodeName === nodeElem.nodeName) {\n        hasNextSiblings = true;\n        break;\n      }\n      sibling = sibling.nextSibling;\n    }\n    const prefix = nodeElem.prefix ? `${nodeElem.prefix}:` : '';\n    const nth =\n      nbOfPreviousSiblings || hasNextSiblings\n        ? `[${nbOfPreviousSiblings + 1}]`\n        : '';\n    parts.push(prefix + nodeElem.localName + nth);\n    nodeElem = nodeElem.parentElement;\n  }\n  return parts.length ? `/${parts.reverse().join('/')}` : '';\n};\n\n/**\n * Extracts relevant attributes from an HTMLElement\n * @param element - The element to get attributes from\n * @returns An object containing the element's attributes\n */\nexport function getElementAttributes(element: HTMLElement): { [key: string]: string } {\n  const attrs: { [key: string]: string } = {};\n  const priorityAttrs = [\n    'id',\n    'class',\n    'name',\n    'type',\n    'href',\n    'src',\n    'alt',\n    'for',\n    'placeholder',\n  ];\n  const dataAttrs: { name: string; value: string }[] = [];\n\n  for (let i = 0; i < element.attributes.length; i++) {\n    const attr = element.attributes[i];\n    if (attr.name.startsWith('data-')) {\n      dataAttrs.push({ name: attr.name, value: attr.value });\n    } else if (\n      priorityAttrs.includes(attr.name.toLowerCase()) ||\n      attr.name.toLowerCase() !== 'style'\n    ) {\n      attrs[attr.name] = attr.value;\n    }\n  }\n  \n  dataAttrs.forEach((da) => {\n    attrs[da.name] = da.value;\n  });\n  \n  return attrs;\n}\n\n/**\n * Generates a detailed context string for a single HTMLElement\n * @param element - The element to generate context for\n * @param index - The index of the element\n * @returns A string containing the element's context\n */\nexport function generateElementContext(element: HTMLElement, index: number): string {\n  let context = `<element index=\"${index + 1}\">\\n`;\n  context += `  <tag>${element.tagName.toLowerCase()}</tag>\\n`;\n\n  const id = element.id;\n  if (id) {\n    context += `  <id>${id}</id>\\n`;\n  }\n\n  const classes = Array.from(element.classList).join(', ');\n  if (classes) {\n    context += `  <classes>${classes}</classes>\\n`;\n  }\n\n  const attributes = getElementAttributes(element);\n  if (Object.keys(attributes).length > 0) {\n    context += `  <attributes>\\n`;\n    for (const [key, value] of Object.entries(attributes)) {\n      if (key.toLowerCase() !== 'class' || !classes) {\n        context += `    <${key}>${value}</${key}>\\n`;\n      }\n    }\n    context += `  </attributes>\\n`;\n  }\n\n  const text = element.innerText?.trim();\n  if (text) {\n    const maxLength = 100;\n    context += `  <text>${text.length > maxLength ? `${text.substring(0, maxLength)}...` : text}</text>\\n`;\n  }\n\n  context += `  <structural_context>\\n`;\n  if (element.parentElement) {\n    const parent = element.parentElement;\n    context += `    <parent>\\n`;\n    context += `      <tag>${parent.tagName.toLowerCase()}</tag>\\n`;\n    if (parent.id) {\n      context += `      <id>${parent.id}</id>\\n`;\n    }\n    const parentClasses = Array.from(parent.classList).join(', ');\n    if (parentClasses) {\n      context += `      <classes>${parentClasses}</classes>\\n`;\n    }\n    context += `    </parent>\\n`;\n  } else {\n    context += `    <parent>No parent element found (likely root or disconnected)</parent>\\n`;\n  }\n  context += `  </structural_context>\\n`;\n\n  try {\n    const styles = window.getComputedStyle(element);\n    const relevantStyles = {\n      color: styles.color,\n      backgroundColor: styles.backgroundColor,\n      fontSize: styles.fontSize,\n      fontWeight: styles.fontWeight,\n      display: styles.display,\n    };\n    context += `  <styles>\\n`;\n    for (const [key, value] of Object.entries(relevantStyles)) {\n      context += `    <${key}>${value}</${key}>\\n`;\n    }\n    context += `  </styles>\\n`;\n  } catch (e) {\n    context += `  <styles>Could not retrieve computed styles</styles>\\n`;\n  }\n\n  context += `</element>\\n`;\n  return context;\n}\n\n/**\n * Creates a prompt containing information about the selected elements\n * @param selectedElements - The selected elements\n * @param userPrompt - The user's prompt\n * @param url - The page URL\n * @returns A string containing the prompt\n */\nexport function createElementsPrompt(\n  selectedElements: HTMLElement[],\n  userPrompt: string,\n): string {\n  if (!selectedElements || selectedElements.length === 0) {\n    return `\n    <request>\n      <user_goal>${userPrompt}</user_goal>\n      <context>No specific element was selected on the page. Please analyze the page code in general or ask for clarification.</context>\n    </request>`.trim();\n  }\n\n  let detailedContext = '';\n  selectedElements.forEach((element, index) => {\n    detailedContext += generateElementContext(element, index);\n  });\n\n  return `\n<request>\n  <user_goal>${userPrompt}</user_goal>\n  <selected_elements>\n    ${detailedContext.trim()}\n  </selected_elements>\n</request>`.trim();\n}\n\n/**\n * Finds the most specific/innermost element at a given point\n * @param x - The x coordinate\n * @param y - The y coordinate\n * @param excludeSelector - CSS selector to exclude elements\n * @returns The most specific element at the point\n */\nexport function getMostSpecificElementAtPoint(\n  x: number,\n  y: number,\n  excludeSelector?: string\n): HTMLElement {\n  // Add a default exclude for the element selector itself\n  const fullExcludeSelector = excludeSelector \n    ? `${excludeSelector}, .element-selector, [data-element-selector=\"true\"]` \n    : `.element-selector, [data-element-selector=\"true\"]`;\n    \n  const elements = document.elementsFromPoint(x, y);\n  \n  // Filter out excluded elements and SVG elements\n  const eligibleElements = elements.filter(element => {\n    // Skip the element selector and any specified excludes\n    if (fullExcludeSelector && \n       (element.matches(fullExcludeSelector) || \n        element.closest(fullExcludeSelector))) {\n      return false;\n    }\n    \n    // Skip SVG elements\n    if (element.closest('svg')) {\n      return false;\n    }\n    \n    // Skip the element selector class or attribute\n    if (element.classList.contains('element-selector') || \n        element.hasAttribute('data-element-selector')) {\n      return false;\n    }\n    \n    return isElementAtPoint(element as HTMLElement, x, y);\n  }) as HTMLElement[];\n  \n  if (eligibleElements.length === 0) {\n    return document.body;\n  }\n  \n  // Sort elements by various criteria to find the most specific one\n  const sortedElements = [...eligibleElements].sort((a, b) => {\n    // 1. First check depth - deeper DOM elements are more specific\n    const aDepth = getElementDepth(a);\n    const bDepth = getElementDepth(b);\n    \n    if (aDepth !== bDepth) {\n      return bDepth - aDepth; // Higher depth is more specific\n    }\n    \n    // 2. If at same depth, prefer elements with less children\n    const aChildren = a.children.length;\n    const bChildren = b.children.length;\n    \n    if (aChildren !== bChildren) {\n      return aChildren - bChildren; // Fewer children is more specific\n    }\n    \n    // 3. If still tied, use element area\n    const aRect = a.getBoundingClientRect();\n    const bRect = b.getBoundingClientRect();\n    const aArea = aRect.width * aRect.height;\n    const bArea = bRect.width * bRect.height;\n    return aArea - bArea; // Smaller area is more specific\n  });\n  \n  // Return the most specific eligible element\n  return sortedElements[0];\n}\n\n/**\n * Helper function to calculate the depth of an element in the DOM tree\n * @param element - The element to check\n * @returns The depth of the element\n */\nfunction getElementDepth(element: HTMLElement): number {\n  let depth = 0;\n  let current = element;\n  \n  while (current.parentElement) {\n    depth++;\n    current = current.parentElement;\n  }\n  \n  return depth;\n}\n","\"use client\";\nimport React, { useCallback, useEffect, useRef } from 'react';\n\nexport interface ElementHighlighterProps {\n  /**\n   * The element to highlight\n   */\n  element: HTMLElement;\n  \n  /**\n   * CSS class for the highlighter\n   */\n  className?: string;\n  \n  /**\n   * Custom styles for the highlighter\n   */\n  style?: React.CSSProperties;\n  \n  /**\n   * Update rate in frames per second (0 to disable updates)\n   */\n  updateRate?: number;\n  \n  /**\n   * Content to render inside the highlighter\n   */\n  children?: React.ReactNode;\n  \n  /**\n   * Border color for the highlighter\n   */\n  borderColor?: string;\n  \n  /**\n   * Background color for the highlighter\n   */\n  backgroundColor?: string;\n}\n\n/**\n * A component that highlights a DOM element with a border\n */\nexport function ElementHighlighter({\n  element,\n  className = '',\n  style = {},\n  updateRate = 30,\n  children,\n  borderColor = 'rgba(59, 130, 246, 0.8)',\n  backgroundColor = 'rgba(59, 130, 246, 0.2)',\n}: ElementHighlighterProps) {\n  const boxRef = useRef<HTMLDivElement>(null);\n  const updateIntervalRef = useRef<number | null>(null);\n\n  const updateBoxPosition = useCallback(() => {\n    if (boxRef.current && element) {\n      const referenceRect = element.getBoundingClientRect();\n\n      boxRef.current.style.top = `${referenceRect.top - 2}px`;\n      boxRef.current.style.left = `${referenceRect.left - 2}px`;\n      boxRef.current.style.width = `${referenceRect.width + 4}px`;\n      boxRef.current.style.height = `${referenceRect.height + 4}px`;\n    }\n  }, [element]);\n\n  // Set up the interval for updating the box position\n  useEffect(() => {\n    updateBoxPosition();\n    \n    if (updateRate > 0) {\n      const intervalId = window.setInterval(() => {\n        updateBoxPosition();\n      }, 1000 / updateRate);\n      \n      updateIntervalRef.current = intervalId;\n      \n      return () => {\n        if (updateIntervalRef.current !== null) {\n          window.clearInterval(updateIntervalRef.current);\n        }\n      };\n    }\n  }, [updateBoxPosition, updateRate]);\n\n  // Also update on window resize\n  useEffect(() => {\n    const handleResize = () => {\n      updateBoxPosition();\n    };\n    \n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [updateBoxPosition]);\n\n  return (\n    <div\n      className={`element-highlighter ${className}`}\n      style={{\n        position: 'fixed',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        borderRadius: '4px',\n        border: `2px solid ${borderColor}`,\n        backgroundColor,\n        transition: 'all 100ms',\n        zIndex: 9998,\n        pointerEvents: 'none',\n        ...style,\n      }}\n      ref={boxRef}\n    >\n      {children}\n    </div>\n  );\n}\n","\"use client\";\nimport React, { useCallback, useState, useEffect } from 'react';\nimport { ElementHighlighter } from './ElementHighlighter';\nimport { ElementSelector } from './ElementSelector';\nimport { createElementsPrompt } from './utils';\nimport { SquareDashedMousePointer, MousePointer, X, Send } from 'lucide-react';\n\nexport interface ElementInspectorProps {\n  /**\n   * Initial state of the inspector (active or not)\n   */\n  initialIsActive?: boolean;\n  \n  /**\n   * CSS selector for elements to exclude from selection\n   */\n  excludeSelector?: string;\n  \n  /**\n   * Maximum number of elements that can be selected\n   */\n  maxElements?: number;\n  \n  /**\n   * Custom label for selected elements\n   */\n  elementLabel?: (element: HTMLElement) => React.ReactNode;\n  \n  /**\n   * Custom styles for the selector\n   */\n  selectorStyle?: React.CSSProperties;\n  \n  /**\n   * Custom styles for the highlighter\n   */\n  highlighterStyle?: React.CSSProperties;\n}\n\n/**\n * A component that allows inspecting and selecting DOM elements with a UI for interaction\n */\nexport function ElementInspector({\n  initialIsActive = false,\n  excludeSelector = '.element-inspector-bubble, .element-inspector-controls',\n  elementLabel,\n  selectorStyle,\n  highlighterStyle,\n}: ElementInspectorProps) {\n  const [isInspecting, setIsInspecting] = useState(initialIsActive);\n  const [hoveredElement, setHoveredElement] = useState<HTMLElement | null>(null);\n  const [selectedElements, setSelectedElements] = useState<HTMLElement[]>([]);\n  const [userPrompt, setUserPrompt] = useState('');\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  \n  const handleElementsSelected = useCallback((elements: HTMLElement[]) => {\n    setSelectedElements(elements);\n  }, []);\n\n  const onPromptGenerated = useCallback((prompt: string, elements: HTMLElement[]) => {\n    console.log('Generated prompt:', prompt);\n    \n    // Create a custom event for local handlers\n    const promptEvent = new CustomEvent('promptGenerated', {\n      detail: { prompt, elements }\n    });\n    document.dispatchEvent(promptEvent);\n    \n    // Check if component is inside an iframe by comparing window and parent\n    const isInIframe = window.self !== window.top;\n    if (isInIframe) {\n      // Send a postMessage to the parent window\n      window.parent.postMessage({\n        type: 'ELEMENT_INSPECTOR_PROMPT',\n        payload: {\n          prompt,\n          elements: elements.map(el => ({\n            tagName: el.tagName,\n            id: el.id,\n            className: el.className,\n            textContent: el.textContent?.trim(),\n            attributes: Array.from(el.attributes).map(attr => ({\n              name: attr.name,\n              value: attr.value\n            }))\n          }))\n        }\n      }, '*');\n      console.log('Sent postMessage to parent window');\n    }\n  }, []);\n  \n  const toggleInspection = useCallback(() => {\n    setIsInspecting(!isInspecting);\n    if (isInspecting) {\n      setSelectedElements([]);\n    }\n  }, [isInspecting]);\n\n  // Handle escape key to exit inspection mode\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === 'Escape' && isInspecting) {\n        setIsInspecting(false);\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [isInspecting]);\n\n  const handleMenuToggle = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n    setIsInspecting(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handlePromptSubmit = useCallback((e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (selectedElements.length > 0 && userPrompt) {\n      // Generate the prompt based on selected elements and user input\n      const prompt = createElementsPrompt(\n        selectedElements,\n        userPrompt,\n      );\n      \n      // Call the onPromptGenerated callback\n      onPromptGenerated(prompt, selectedElements);\n      \n      // Clear the input field after submission\n      setUserPrompt('');\n    }\n  }, [selectedElements, userPrompt, onPromptGenerated]);\n\n  const handleElementHovered = useCallback((element: HTMLElement) => {\n    setHoveredElement(element);\n  }, []);\n\n  const handleElementUnhovered = useCallback(() => {\n    setHoveredElement(null);\n  }, []);\n  \n  return (\n    <div className=\"app\">\n      {/* Element Inspector Component */}\n      {isInspecting && (\n        <>\n          {/* Element selection overlay */}\n          <ElementSelector\n            onElementHovered={handleElementHovered}\n            onElementSelected={(element) => {\n              const newSelectedElements = selectedElements.includes(element)\n                ? selectedElements.filter(el => el !== element) // Remove if already selected\n                : [...selectedElements, element]; // Add if not selected\n              \n              handleElementsSelected(newSelectedElements);\n            }}\n            onElementUnhovered={handleElementUnhovered}\n            ignoreList={selectedElements}\n            excludeSelector={excludeSelector}\n            style={selectorStyle}\n            useBasicSelection={false}\n            selectionModeToggleKey=\"Alt\"\n          />\n          \n          {/* Highlight for hovered element */}\n          {hoveredElement && (\n            <ElementHighlighter \n              element={hoveredElement}\n              borderColor=\"rgba(59, 130, 246, 0.8)\"\n              backgroundColor=\"rgba(59, 130, 246, 0.2)\"\n              style={highlighterStyle}\n            >\n              {elementLabel ? (\n                elementLabel(hoveredElement)\n              ) : (\n                <div className=\"element-tag-label\" style={{\n                  position: 'absolute',\n                  top: '0.5px',\n                  left: '0.5px',\n                  backgroundColor: 'rgba(52, 53, 65, 0.8)',\n                  borderRadius: '4px',\n                  padding: '2px 6px',\n                  fontSize: '12px',\n                  color: 'white',\n                  pointerEvents: 'none',\n                }}>\n                  {hoveredElement.tagName.toLowerCase()}\n                </div>\n              )}\n            </ElementHighlighter>\n          )}\n          \n          {/* Highlights for selected elements */}\n          {selectedElements.map((element, index) => (\n            <ElementHighlighter\n              key={`selected-${index}`}\n              element={element}\n              borderColor=\"rgba(34, 197, 94, 0.8)\"\n              backgroundColor=\"rgba(34, 197, 94, 0.2)\"\n              style={highlighterStyle}\n            >\n              {elementLabel ? (\n                elementLabel(element)\n              ) : (\n                <div className=\"element-tag-label\" style={{\n                  position: 'absolute',\n                  top: '0.5px',\n                  left: '0.5px',\n                  backgroundColor: 'rgba(52, 53, 65, 0.8)',\n                  borderRadius: '4px',\n                  padding: '2px 6px',\n                  fontSize: '12px',\n                  color: 'white',\n                  pointerEvents: 'none',\n                }}>\n                  {element.tagName.toLowerCase()}\n                </div>\n              )}\n            </ElementHighlighter>\n          ))}\n        </>\n      )}\n\n      {/* Bubble Menu */}\n      <div className=\"fixed bottom-6 right-6 z-[9999] element-inspector-bubble element-inspector-controls\">\n        {/* Main Menu Button */}\n        <button\n          onClick={handleMenuToggle}\n          className=\"bg-blue-500 hover:bg-blue-600 text-white p-3 rounded-full shadow-lg transition-all duration-200 element-inspector-controls\"\n          title=\"Element Inspector\"\n        >\n          {isMenuOpen ? (\n            <X size={20} />\n          ) : (\n            <SquareDashedMousePointer size={20} />\n          )}\n        </button>\n\n        {/* Expanded Menu */}\n        {(isMenuOpen || isInspecting) && (\n          <div className=\"absolute bottom-16 right-0 bg-white dark:bg-gray-800 rounded-lg shadow-xl p-4 w-[350px] transition-all duration-200 element-inspector-controls\">\n            {/* Header with Close Button */}\n            <div className=\"flex justify-between items-center mb-3 element-inspector-controls\">\n              <h3 className=\"text-sm font-medium text-gray-800 dark:text-gray-200\">Element Inspector</h3>\n              <button \n                onClick={handleMenuToggle}\n                className=\"text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 element-inspector-controls\"\n                aria-label=\"Close menu\"\n              >\n                <X size={16} />\n              </button>\n            </div>\n          \n            {/* Inspector Toggle */}\n            <div className=\"mb-4 flex items-center justify-between element-inspector-controls\">\n              <div className=\"flex items-center gap-2 element-inspector-controls\">\n                <MousePointer size={18} className=\"text-gray-600 dark:text-gray-300\" />\n                <span className=\"text-sm font-medium text-gray-700 dark:text-gray-200\">\n                  Inspection Mode\n                </span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                {selectedElements.length > 0 && (\n                  <span className=\"text-xs font-medium text-green-600 dark:text-green-400\">\n                    {selectedElements.length} selected\n                  </span>\n                )}\n                <button\n                  onClick={toggleInspection}\n                  className={`px-3 py-1 rounded-full text-xs font-medium transition-colors element-inspector-controls ${\n                    isInspecting \n                      ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-100' \n                      : 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300'\n                  }`}\n                >\n                  {isInspecting ? 'Active' : 'Inactive'}\n                </button>\n              </div>\n            </div>\n            \n            {/* Prompt Input */}\n            <form onSubmit={handlePromptSubmit} className=\"mt-3 element-inspector-controls\">\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 element-inspector-controls\">\n                Prompt\n              </label>\n              <div className=\"flex element-inspector-controls\">\n                <input\n                  type=\"text\"\n                  value={userPrompt}\n                  onChange={(e) => setUserPrompt(e.target.value)}\n                  className={`flex-1 p-2 text-sm border ${\n                    selectedElements.length > 0 \n                      ? 'border-green-300 dark:border-green-600' \n                      : 'border-gray-300 dark:border-gray-600'\n                  } rounded-l-md dark:bg-gray-700 dark:text-white focus:outline-none focus:ring-1 focus:ring-blue-500 element-inspector-controls`}\n                  placeholder={selectedElements.length > 0 \n                    ? `Enter prompt for ${selectedElements.length} selected element(s)` \n                    : \"Select elements first\"}\n                />\n                <button\n                  type=\"submit\"\n                  className=\"bg-blue-500 hover:bg-blue-600 text-white px-3 py-2 rounded-r-md transition-colors element-inspector-controls\"\n                >\n                  <Send size={16} />\n                </button>\n              </div>\n            </form>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","/**\n * Types and utilities for creating structured prompts with element context\n */\n\n/**\n * A context snippet that can be added to a prompt.\n */\nexport interface ContextSnippet {\n  /**\n   * The name of the context in the prompt\n   */\n  promptContextName: string;\n  \n  /**\n   * The content of the context, either as a string or a function that returns a string or Promise<string>\n   */\n  content: string | (() => string | Promise<string>);\n}\n\n/**\n * A plugin's context snippets\n */\nexport interface PluginContextSnippets {\n  /**\n   * The name of the plugin\n   */\n  pluginName: string;\n  \n  /**\n   * The context snippets provided by the plugin\n   */\n  contextSnippets: ContextSnippet[];\n}\n\n/**\n * Creates a comprehensive prompt for an AI model with element context\n * \n * @param selectedElements - The selected DOM elements\n * @param userPrompt - The user's prompt text\n * @param url - The current page URL\n * @param contextSnippets - Optional additional context snippets from plugins\n * @returns A formatted XML-style prompt\n */\nexport function createPromptWithPlugins(\n  selectedElements: HTMLElement[],\n  userPrompt: string,\n  url: string,\n  contextSnippets: PluginContextSnippets[] = []\n): string {\n  // Format plugin context if provided\n  const pluginContext = contextSnippets.length > 0\n    ? contextSnippets\n        .map((snippet) => `\n        <plugin_contexts>\n<${snippet.pluginName}>\n${snippet.contextSnippets.map((snippet) => `    <${snippet.promptContextName}>${typeof snippet.content === 'function' ? snippet.content() : snippet.content}</${snippet.promptContextName}>`).join('\\n')}\n</${snippet.pluginName}>\n</plugin_contexts>\n        `.trim())\n        .join('\\n')\n    : '';\n\n  // Handle case with no selected elements\n  if (!selectedElements || selectedElements.length === 0) {\n    return `\n    <request>\n      <user_goal>${userPrompt}</user_goal>\n      <url>${url}</url>\n      <context>No specific element was selected on the page. Please analyze the page code in general or ask for clarification.</context>\n      ${pluginContext}\n    </request>`.trim();\n  }\n\n  // Generate context for each selected element\n  let detailedContext = '';\n  selectedElements.forEach((element, index) => {\n    detailedContext += generateElementContext(element, index);\n  });\n\n  return `\n<request>\n  <user_goal>${userPrompt}</user_goal>\n  <url>${url}</url>\n  <selected_elements>\n    ${detailedContext.trim()}\n  </selected_elements>\n  ${pluginContext}\n</request>`.trim();\n}\n\n/**\n * Gets the attributes of an element that are relevant for context\n */\nexport function getElementAttributes(element: HTMLElement): { [key: string]: string } {\n  const attrs: { [key: string]: string } = {};\n  const priorityAttrs = [\n    'id',\n    'class',\n    'name',\n    'type',\n    'href',\n    'src',\n    'alt',\n    'for',\n    'placeholder',\n  ];\n  const dataAttrs: Array<{ name: string; value: string }> = [];\n\n  for (let i = 0; i < element.attributes.length; i++) {\n    const attr = element.attributes[i];\n    if (attr.name.startsWith('data-')) {\n      dataAttrs.push({ name: attr.name, value: attr.value });\n    } else if (\n      priorityAttrs.includes(attr.name.toLowerCase()) ||\n      attr.name.toLowerCase() !== 'style'\n    ) {\n      attrs[attr.name] = attr.value;\n    }\n  }\n  \n  dataAttrs.forEach((da) => {\n    attrs[da.name] = da.value;\n  });\n  \n  return attrs;\n}\n\n/**\n * Generates detailed XML context for a DOM element\n */\nexport function generateElementContext(element: HTMLElement, index: number): string {\n  let context = `<element index=\"${index + 1}\">\\n`;\n  context += `  <tag>${element.tagName.toLowerCase()}</tag>\\n`;\n\n  const id = element.id;\n  if (id) {\n    context += `  <id>${id}</id>\\n`;\n  }\n\n  const classes = Array.from(element.classList).join(', ');\n  if (classes) {\n    context += `  <classes>${classes}</classes>\\n`;\n  }\n\n  const attributes = getElementAttributes(element);\n  if (Object.keys(attributes).length > 0) {\n    context += `  <attributes>\\n`;\n    for (const [key, value] of Object.entries(attributes)) {\n      if (key.toLowerCase() !== 'class' || !classes) {\n        context += `    <${key}>${value}</${key}>\\n`;\n      }\n    }\n    context += `  </attributes>\\n`;\n  }\n\n  const text = element.innerText?.trim();\n  if (text) {\n    const maxLength = 100;\n    context += `  <text>${text.length > maxLength ? `${text.substring(0, maxLength)}...` : text}</text>\\n`;\n  }\n\n  context += `  <structural_context>\\n`;\n  if (element.parentElement) {\n    const parent = element.parentElement;\n    context += `    <parent>\\n`;\n    context += `      <tag>${parent.tagName.toLowerCase()}</tag>\\n`;\n    if (parent.id) {\n      context += `      <id>${parent.id}</id>\\n`;\n    }\n    const parentClasses = Array.from(parent.classList).join(', ');\n    if (parentClasses) {\n      context += `      <classes>${parentClasses}</classes>\\n`;\n    }\n    context += `    </parent>\\n`;\n  } else {\n    context += `    <parent>No parent element found (likely root or disconnected)</parent>\\n`;\n  }\n  context += `  </structural_context>\\n`;\n\n  try {\n    const styles = window.getComputedStyle(element);\n    const relevantStyles = {\n      color: styles.color,\n      backgroundColor: styles.backgroundColor,\n      fontSize: styles.fontSize,\n      fontWeight: styles.fontWeight,\n      display: styles.display,\n    };\n    context += `  <styles>\\n`;\n    for (const [key, value] of Object.entries(relevantStyles)) {\n      context += `    <${key}>${value}</${key}>\\n`;\n    }\n    context += `  </styles>\\n`;\n  } catch (e) {\n    context += `  <styles>Could not retrieve computed styles</styles>\\n`;\n  }\n\n  context += `</element>\\n`;\n  return context;\n}\n"],"mappings":"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","names":["useCallback","useRef","jsx","useCallback","useEffect","jsx","useCallback","useEffect","snippet","generateElementContext","getElementAttributes"]}