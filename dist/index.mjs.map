{"version":3,"sources":["../src/ElementSelector.tsx","../src/utils.ts","../src/ElementHighlighter.tsx","../src/ElementInspector.tsx","../src/styles.ts","../src/Icons.tsx","../src/components/BubbleMenuButton.tsx","../src/components/ElementTagLabel.tsx","../src/components/PromptForm.tsx","../src/constants.ts","../src/hooks/useDarkMode.ts","../src/hooks/useElementBubblePosition.ts","../src/hooks/useElementSelection.ts","../src/hooks/useIframeMessaging.ts","../src/hooks/useInspector.ts"],"sourcesContent":["\"use client\";\nimport React, { useCallback, useRef } from 'react';\nimport { getMostSpecificElementAtPoint } from './utils';\n\nexport interface ElementSelectorProps {\n  /**\n   * Callback when an element is hovered\n   */\n  onElementHovered: (element: HTMLElement) => void;\n  \n  /**\n   * Callback when an element is no longer hovered\n   */\n  onElementUnhovered: () => void;\n  \n  /**\n   * Callback when an element is selected\n   */\n  onElementSelected: (element: HTMLElement) => void;\n  \n  /**\n   * List of elements to ignore during selection\n   */\n  ignoreList?: HTMLElement[];\n  \n  /**\n   * CSS selector for elements to exclude\n   */\n  excludeSelector?: string;\n  \n  /**\n   * CSS class name for the selector overlay\n   */\n  className?: string;\n  \n  /**\n   * Custom styles for the selector overlay\n   */\n  style?: React.CSSProperties;\n  \n  /**\n   * Custom filter function for elements\n   * Return true to allow selection, false to prevent\n   */\n  elementFilter?: (element: HTMLElement) => boolean;\n}\n\n/**\n * ElementSelector component that creates an overlay to select DOM elements\n */\nexport function ElementSelector({\n  onElementHovered,\n  onElementUnhovered,\n  onElementSelected,\n  ignoreList = [],\n  excludeSelector = '',\n  className = '',\n  style = {},\n  elementFilter,\n}: ElementSelectorProps) {\n  const lastHoveredElement = useRef<HTMLElement | null>(null);\n\n  const handleMouseMove = useCallback(\n    (event: React.MouseEvent<HTMLDivElement>) => {\n      const { clientX, clientY } = event;\n      \n      // Hide the overlay temporarily to get accurate element detection\n      const overlayElement = event.currentTarget;\n      if (overlayElement) {\n        overlayElement.style.pointerEvents = 'none';\n      }\n      \n      // Get element at this point (with overlay hidden)\n      const refElement = getMostSpecificElementAtPoint(clientX, clientY, excludeSelector);\n      \n      // Restore the overlay\n      if (overlayElement) {\n        overlayElement.style.pointerEvents = 'auto';\n      }\n      \n      // Ignore if element is in the ignore list\n      if (ignoreList.includes(refElement)) return;\n      \n      // Ignore if element is the overlay itself or a child of it\n      if (refElement === overlayElement || \n          (overlayElement && overlayElement.contains(refElement))) {\n        return;\n      }\n      \n      // Apply custom element filter if provided\n      if (elementFilter && !elementFilter(refElement)) {\n        return;\n      }\n      \n      // Only trigger callback if the hovered element has changed\n      if (lastHoveredElement.current !== refElement) {\n        lastHoveredElement.current = refElement;\n        onElementHovered(refElement);\n      }\n    },\n    [onElementHovered, ignoreList, excludeSelector, elementFilter]\n  );\n\n  const handleMouseLeave = useCallback(() => {\n    lastHoveredElement.current = null;\n    onElementUnhovered();\n  }, [onElementUnhovered]);\n\n  const handleMouseClick = useCallback(\n    (event: React.MouseEvent<HTMLDivElement>) => {\n      // Prevent the default action and stop propagation\n      event.preventDefault();\n      event.stopPropagation();\n      \n      const { clientX, clientY } = event;\n      \n      // Hide the overlay temporarily to get accurate element detection\n      const overlayElement = event.currentTarget;\n      if (overlayElement) {\n        overlayElement.style.pointerEvents = 'none';\n      }\n      \n      // Get the most accurate element at click position\n      const clickedElement = getMostSpecificElementAtPoint(clientX, clientY, excludeSelector);\n      \n      // Restore the overlay\n      if (overlayElement) {\n        overlayElement.style.pointerEvents = 'auto';\n      }\n      \n      // Don't select if it's the overlay\n      if (\n        clickedElement === overlayElement || \n        (overlayElement && overlayElement.contains(clickedElement))\n      ) {\n        return;\n      }\n      \n      // Apply custom element filter if provided\n      if (elementFilter && !elementFilter(clickedElement)) {\n        return;\n      }\n      \n      // Update last hovered element and trigger selection\n      lastHoveredElement.current = clickedElement;\n      onElementSelected(clickedElement);\n    },\n    [onElementSelected, ignoreList, excludeSelector, elementFilter]\n  );\n\n  return (\n    <div\n      className={`element-selector ${className}`}\n      data-element-selector=\"true\"\n      style={{\n        position: 'fixed',\n        inset: 0,\n        height: '100vh',\n        width: '100vw',\n        cursor: 'cell',\n        zIndex: 9999,\n        pointerEvents: 'auto',\n        ...style,\n      }}\n      onMouseMove={handleMouseMove}\n      onMouseLeave={handleMouseLeave}\n      onClick={handleMouseClick}\n      role=\"button\"\n      tabIndex={0}\n    />\n  );\n}\n","/**\n * Utility functions for DOM element inspection and manipulation\n */\n\n/**\n * Checks if a point is within an element's bounds\n * @param element - The element to check\n * @param clientX - The x coordinate\n * @param clientY - The y coordinate\n * @returns Whether the point is within the element's bounds\n */\nexport const isElementAtPoint = (\n  element: HTMLElement,\n  clientX: number,\n  clientY: number,\n): boolean => {\n  const boundingRect = element.getBoundingClientRect();\n\n  const isInHorizontalBounds =\n    clientX >= boundingRect.left &&\n    clientX <= boundingRect.left + boundingRect.width;\n  const isInVerticalBounds =\n    clientY >= boundingRect.top &&\n    clientY <= boundingRect.top + boundingRect.height;\n\n  return isInHorizontalBounds && isInVerticalBounds;\n};\n\n/**\n * Calculates the percentage offsets from a point to an element\n * @param refElement - The reference element\n * @param x - The x coordinate\n * @param y - The y coordinate\n * @returns The percentage offsets\n */\nexport function getOffsetsFromPointToElement(\n  refElement: HTMLElement,\n  x: number,\n  y: number,\n): { offsetTop: number; offsetLeft: number } {\n  const referenceClientBounds = refElement.getBoundingClientRect();\n\n  const offsetTop =\n    ((y - referenceClientBounds.top) * 100) / referenceClientBounds.height;\n  const offsetLeft =\n    ((x - referenceClientBounds.left) * 100) / referenceClientBounds.width;\n\n  return {\n    offsetTop,\n    offsetLeft,\n  };\n}\n\n/**\n * Gets the XPath for an element\n * @param element - The element to get the XPath for\n * @param useId - Whether to use the element's ID if available\n * @returns The XPath for the element\n */\nexport const getXPathForElement = (element: HTMLElement, useId = true): string => {\n  if (element.id && useId) {\n    return `//*[@id=\"${element.id}\"]`;\n  }\n\n  let nodeElem: HTMLElement | null = element;\n  const parts: string[] = [];\n  while (nodeElem && Node.ELEMENT_NODE === nodeElem.nodeType) {\n    let nbOfPreviousSiblings = 0;\n    let hasNextSiblings = false;\n    let sibling = nodeElem.previousSibling;\n    while (sibling) {\n      if (\n        sibling.nodeType !== Node.DOCUMENT_TYPE_NODE &&\n        sibling.nodeName === nodeElem.nodeName\n      ) {\n        nbOfPreviousSiblings++;\n      }\n      sibling = sibling.previousSibling;\n    }\n    sibling = nodeElem.nextSibling;\n    while (sibling) {\n      if (sibling.nodeName === nodeElem.nodeName) {\n        hasNextSiblings = true;\n        break;\n      }\n      sibling = sibling.nextSibling;\n    }\n    const prefix = nodeElem.prefix ? `${nodeElem.prefix}:` : '';\n    const nth =\n      nbOfPreviousSiblings || hasNextSiblings\n        ? `[${nbOfPreviousSiblings + 1}]`\n        : '';\n    parts.push(prefix + nodeElem.localName + nth);\n    nodeElem = nodeElem.parentElement;\n  }\n  return parts.length ? `/${parts.reverse().join('/')}` : '';\n};\n\n/**\n * Extracts relevant attributes from an HTMLElement\n * @param element - The element to get attributes from\n * @returns An object containing the element's attributes\n */\nexport function getElementAttributes(element: HTMLElement): { [key: string]: string } {\n  const attrs: { [key: string]: string } = {};\n  const priorityAttrs = [\n    'id',\n    'class',\n    'name',\n    'type',\n    'href',\n    'src',\n    'alt',\n    'for',\n    'placeholder',\n  ];\n  const dataAttrs: { name: string; value: string }[] = [];\n\n  for (let i = 0; i < element.attributes.length; i++) {\n    const attr = element.attributes[i];\n    if (attr.name.startsWith('data-')) {\n      dataAttrs.push({ name: attr.name, value: attr.value });\n    } else if (\n      priorityAttrs.includes(attr.name.toLowerCase()) ||\n      attr.name.toLowerCase() !== 'style'\n    ) {\n      attrs[attr.name] = attr.value;\n    }\n  }\n  \n  dataAttrs.forEach((da) => {\n    attrs[da.name] = da.value;\n  });\n  \n  return attrs;\n}\n\n/**\n * Generates a detailed context string for a single HTMLElement\n * @param element - The element to generate context for\n * @param index - The index of the element\n * @param totalElements - The total number of elements\n * @returns A string containing the element's context\n */\nexport function generateElementContext(\n  element: HTMLElement,\n  index: number,\n  totalElements: number,\n): string {\n  let context = \"\";\n  \n  // Only add element numbering if there are multiple elements\n  if (totalElements > 1) {\n    context += `### Element ${index + 1}\\n`;\n  }\n  \n  context += `- **Tag**: ${element.tagName.toLowerCase()}\\n`;\n\n  const id = element.id;\n  if (id) {\n    context += `- **ID**: ${id}\\n`;\n  }\n\n  const classes = Array.from(element.classList).join(', ');\n  if (classes) {\n    context += `- **Classes**: ${classes}\\n`;\n  }\n\n  const attributes = getElementAttributes(element);\n  if (Object.keys(attributes).length > 0) {\n    context += `- **Attributes**:\\n`;\n    for (const [key, value] of Object.entries(attributes)) {\n      if (key.toLowerCase() !== 'class' || !classes) {\n        context += `  - ${key}: ${value}\\n`;\n      }\n    }\n  }\n\n  const text = element.innerText?.trim();\n  if (text) {\n    const maxLength = 100;\n    context += `- **Text**: ${text.length > maxLength ? `${text.substring(0, maxLength)}...` : text}\\n`;\n  }\n\n  context += `- **Structural Context**:\\n`;\n  if (element.parentElement) {\n    const parent = element.parentElement;\n    context += `  - **Parent**:\\n`;\n    context += `    - Tag: ${parent.tagName.toLowerCase()}\\n`;\n    if (parent.id) {\n      context += `    - ID: ${parent.id}\\n`;\n    }\n    const parentClasses = Array.from(parent.classList).join(', ');\n    if (parentClasses) {\n      context += `    - Classes: ${parentClasses}\\n`;\n    }\n  } else {\n    context += `  - **Parent**: No parent element found (likely root or disconnected)\\n`;\n  }\n\n  try {\n    const styles = window.getComputedStyle(element);\n    const relevantStyles = {\n      color: styles.color,\n      backgroundColor: styles.backgroundColor,\n      fontSize: styles.fontSize,\n      fontWeight: styles.fontWeight,\n      display: styles.display,\n    };\n    context += `- **Styles**:\\n`;\n    for (const [key, value] of Object.entries(relevantStyles)) {\n      context += `  - ${key}: ${value}\\n`;\n    }\n  } catch (e) {\n    context += `- **Styles**: Could not retrieve computed styles\\n`;\n  }\n\n  context += `\\n`;\n  return context;\n}\n\n/**\n * Creates a prompt containing information about the selected elements\n * @param selectedElements - The selected elements\n * @param userPrompt - The user's prompt\n * @param url - The page URL\n * @returns A string containing the prompt\n */\nexport function createElementsPrompt(\n  selectedElements: HTMLElement[],\n  userPrompt: string,\n): string {\n  if (!selectedElements || selectedElements.length === 0) {\n    return `\n${userPrompt}\n\n## Context\nNo specific element was selected on the page. Please analyze the page code in general or ask for clarification.`.trim();\n  }\n\n  let detailedContext = '';\n  const totalElements = selectedElements.length;\n  \n  selectedElements.forEach((element, index) => {\n    detailedContext += generateElementContext(element, index, totalElements);\n  });\n\n  // Use singular or plural based on number of selected elements\n  const sectionHeader = totalElements > 1 ? '## Selected Elements' : '## Selected Element';\n\n  return `\n${userPrompt}\n\n${sectionHeader}\n${detailedContext.trim()}`.trim();\n}\n\n/**\n * Finds the most specific/innermost element at a given point\n * @param x - The x coordinate\n * @param y - The y coordinate\n * @param excludeSelector - CSS selector to exclude elements\n * @returns The most specific element at the point\n */\nexport function getMostSpecificElementAtPoint(\n  x: number,\n  y: number,\n  excludeSelector?: string\n): HTMLElement {\n  // Add a default exclude for the element selector itself\n  const fullExcludeSelector = excludeSelector \n    ? `${excludeSelector}, .element-selector, [data-element-selector=\"true\"]` \n    : `.element-selector, [data-element-selector=\"true\"]`;\n    \n  const elements = document.elementsFromPoint(x, y);\n  \n  // Filter out excluded elements and SVG elements\n  const eligibleElements = elements.filter(element => {\n    // Skip the element selector and any specified excludes\n    if (fullExcludeSelector && \n       (element.matches(fullExcludeSelector) || \n        element.closest(fullExcludeSelector))) {\n      return false;\n    }\n    \n    // Skip SVG elements\n    if (element.closest('svg')) {\n      return false;\n    }\n    \n    // Skip the element selector class or attribute\n    if (element.classList.contains('element-selector') || \n        element.hasAttribute('data-element-selector')) {\n      return false;\n    }\n    \n    return isElementAtPoint(element as HTMLElement, x, y);\n  }) as HTMLElement[];\n  \n  if (eligibleElements.length === 0) {\n    return document.body;\n  }\n  \n  // Sort elements by various criteria to find the most specific one\n  const sortedElements = [...eligibleElements].sort((a, b) => {\n    // 1. First check depth - deeper DOM elements are more specific\n    const aDepth = getElementDepth(a);\n    const bDepth = getElementDepth(b);\n    \n    if (aDepth !== bDepth) {\n      return bDepth - aDepth; // Higher depth is more specific\n    }\n    \n    // 2. If at same depth, prefer elements with less children\n    const aChildren = a.children.length;\n    const bChildren = b.children.length;\n    \n    if (aChildren !== bChildren) {\n      return aChildren - bChildren; // Fewer children is more specific\n    }\n    \n    // 3. If still tied, use element area\n    const aRect = a.getBoundingClientRect();\n    const bRect = b.getBoundingClientRect();\n    const aArea = aRect.width * aRect.height;\n    const bArea = bRect.width * bRect.height;\n    return aArea - bArea; // Smaller area is more specific\n  });\n  \n  // Return the most specific eligible element\n  return sortedElements[0];\n}\n\n/**\n * Helper function to calculate the depth of an element in the DOM tree\n * @param element - The element to check\n * @returns The depth of the element\n */\nfunction getElementDepth(element: HTMLElement): number {\n  let depth = 0;\n  let current = element;\n  \n  while (current.parentElement) {\n    depth++;\n    current = current.parentElement;\n  }\n  \n  return depth;\n}\n","\"use client\";\nimport React, { useCallback, useEffect, useRef } from 'react';\n\nexport interface ElementHighlighterProps {\n  /**\n   * The element to highlight\n   */\n  element: HTMLElement;\n  \n  /**\n   * CSS class for the highlighter\n   */\n  className?: string;\n  \n  /**\n   * Custom styles for the highlighter\n   */\n  style?: React.CSSProperties;\n  \n  /**\n   * Update rate in frames per second (0 to disable updates)\n   */\n  updateRate?: number;\n  \n  /**\n   * Content to render inside the highlighter\n   */\n  children?: React.ReactNode;\n  \n  /**\n   * Border color for the highlighter\n   */\n  borderColor?: string;\n  \n  /**\n   * Background color for the highlighter\n   */\n  backgroundColor?: string;\n}\n\n/**\n * A component that highlights a DOM element with a border\n */\nexport function ElementHighlighter({\n  element,\n  className = '',\n  style = {},\n  updateRate = 30,\n  children,\n  borderColor = 'rgba(59, 130, 246, 0.8)',\n  backgroundColor = 'rgba(59, 130, 246, 0.2)',\n}: ElementHighlighterProps) {\n  const boxRef = useRef<HTMLDivElement>(null);\n  const updateIntervalRef = useRef<number | null>(null);\n\n  const updateBoxPosition = useCallback(() => {\n    if (boxRef.current && element) {\n      const referenceRect = element.getBoundingClientRect();\n\n      boxRef.current.style.top = `${referenceRect.top - 2}px`;\n      boxRef.current.style.left = `${referenceRect.left - 2}px`;\n      boxRef.current.style.width = `${referenceRect.width + 4}px`;\n      boxRef.current.style.height = `${referenceRect.height + 4}px`;\n    }\n  }, [element]);\n\n  // Set up the interval for updating the box position\n  useEffect(() => {\n    updateBoxPosition();\n    \n    if (updateRate > 0) {\n      const intervalId = window.setInterval(() => {\n        updateBoxPosition();\n      }, 1000 / updateRate);\n      \n      updateIntervalRef.current = intervalId;\n      \n      return () => {\n        if (updateIntervalRef.current !== null) {\n          window.clearInterval(updateIntervalRef.current);\n        }\n      };\n    }\n  }, [updateBoxPosition, updateRate]);\n\n  // Also update on window resize\n  useEffect(() => {\n    const handleResize = () => {\n      updateBoxPosition();\n    };\n    \n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [updateBoxPosition]);\n\n  return (\n    <div\n      className={`element-highlighter ${className}`}\n      style={{\n        position: 'fixed',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        borderRadius: '4px',\n        border: `2px solid ${borderColor}`,\n        backgroundColor,\n        transition: 'all 100ms',\n        zIndex: 9998,\n        pointerEvents: 'none',\n        ...style,\n      }}\n      ref={boxRef}\n    >\n      {children}\n    </div>\n  );\n}\n","\"use client\";\nimport React, { useCallback, useEffect } from 'react';\nimport { BubbleMenuButton, ElementTagLabel, PromptForm } from './components/';\nimport { ElementHighlighter } from './ElementHighlighter';\nimport { ElementSelector } from './ElementSelector';\nimport { darkMode, elements, layout } from './styles';\nimport { UI_CONSTANTS } from './constants';\nimport {\n  useDarkMode,\n  useElementBubblePosition,\n  useElementSelection,\n  useIframeMessaging,\n  useInspector\n} from './hooks';\n\nexport interface ElementInspectorProps {\n  /**\n   * Initial state of the inspector (active or not)\n   */\n  initialIsActive?: boolean;\n  \n  /**\n   * CSS selector for elements to exclude from selection\n   */\n  excludeSelector?: string;\n  \n  /**\n   * Custom label for selected elements\n   */\n  elementLabel?: (element: HTMLElement) => React.ReactNode;\n  \n  /**\n   * Custom styles for the selector\n   */\n  selectorStyle?: React.CSSProperties;\n  \n  /**\n   * Custom styles for the highlighter\n   */\n  highlighterStyle?: React.CSSProperties;\n  \n  /**\n   * Whether to show the floating bubble menu button\n   * @default false\n   */\n  showBubbleMenuButton?: boolean;\n}\n\n/**\n * A component that allows inspecting and selecting DOM elements with a UI for interaction\n */\nexport function ElementInspector({\n  initialIsActive = true,\n  excludeSelector = '.element-inspector-bubble, .element-inspector-controls',\n  elementLabel,\n  selectorStyle,\n  highlighterStyle,\n  showBubbleMenuButton = false,\n}: ElementInspectorProps) {\n  // Custom hooks\n  const isDarkMode = useDarkMode();\n  const { \n    isInIframe, \n    sendSelectedElements, \n    sendPrompt,\n    shouldEnableInspect,\n    elementFilter\n  } = useIframeMessaging();\n  \n  // Element selection hook\n  const { \n    hoveredElement, \n    selectedElements, \n    handleElementHovered, \n    handleElementUnhovered, \n    handleElementSelected,\n    clearSelections \n  } = useElementSelection({\n    onElementsSelected: (elements) => {\n      // Send selected elements to parent frame if in iframe\n      if (isInIframe) {\n        sendSelectedElements(elements);\n      }\n    }\n  });\n  \n  // Bubble position hook\n  const { bubblePosition, isMenuAboveElement } = useElementBubblePosition({\n    selectedElements,\n    menuHeight: UI_CONSTANTS.MENU_HEIGHT,\n    menuWidth: UI_CONSTANTS.MENU_WIDTH,\n    spacing: UI_CONSTANTS.SPACING\n  });\n  \n  // Inspector state hook\n  const {\n    isInspecting,\n    userPrompt,\n    setUserPrompt,\n    toggleInspection,\n    handlePromptSubmit,\n  } =  useInspector({\n    // Use shouldEnableInspect from iframe messaging if in iframe, otherwise use initialIsActive\n    initialIsActive: isInIframe ? shouldEnableInspect : initialIsActive,\n    onPromptGenerated: (prompt, elements) => {\n      // Send prompt to parent frame if in iframe\n      if (isInIframe) {\n        sendPrompt(prompt, elements);\n      }\n    }\n  });\n  \n  // Handle menu toggle - clear selections when toggling off\n  const handleMenuToggle = useCallback(() => {\n    toggleInspection();\n    if (isInspecting) {\n      clearSelections();\n    }\n  }, [isInspecting, toggleInspection, clearSelections]);\n  \n  // Handle form submission with selected elements\n  const onSubmitPrompt = useCallback((e: React.FormEvent) => {\n    handlePromptSubmit(e, selectedElements);\n  }, [handlePromptSubmit, selectedElements]);\n  \n  // Update inspection state when shouldEnableInspect changes (from iframe messages)\n  useEffect(() => {\n    if (isInIframe && isInspecting !== shouldEnableInspect) {\n      toggleInspection();\n    }\n  }, [isInIframe, isInspecting, shouldEnableInspect, toggleInspection]);\n  \n  // Element selector props\n  const elementSelectorProps = {\n    onElementHovered: handleElementHovered,\n    onElementSelected: handleElementSelected,\n    onElementUnhovered: handleElementUnhovered,\n    ignoreList: selectedElements,\n    excludeSelector,\n    style: selectorStyle,\n    elementFilter: isInIframe ? elementFilter : undefined, // Only apply filter when in iframe\n  };\n\n  return (\n    <div>\n      {/* Element Inspector Component */}\n      {isInspecting && (\n        <>\n          {/* Element selection overlay */}\n          <ElementSelector {...elementSelectorProps} />\n          \n          {/* Highlight for hovered element */}\n          {hoveredElement && (\n            <ElementHighlighter \n              element={hoveredElement}\n              borderColor=\"rgba(59, 130, 246, 0.8)\"\n              backgroundColor=\"rgba(59, 130, 246, 0.2)\"\n              style={highlighterStyle}\n            >\n              {elementLabel ? elementLabel(hoveredElement) : <ElementTagLabel element={hoveredElement} />}\n            </ElementHighlighter>\n          )}\n          \n          {/* Highlights for selected elements */}\n          {selectedElements.map((element, index) => (\n            <ElementHighlighter\n              key={`selected-${index}`}\n              element={element}\n              borderColor=\"rgba(34, 197, 94, 0.8)\"\n              backgroundColor=\"rgba(34, 197, 94, 0.2)\"\n              style={highlighterStyle}\n            >\n              {elementLabel ? elementLabel(element) : <ElementTagLabel element={element} />}\n            </ElementHighlighter>\n          ))}\n        </>\n      )}\n\n      {/* Bubble Menu */}\n      <div \n        className=\"element-inspector-bubble\"\n        style={{\n          ...layout.bubble,\n          position: 'static', // The container doesn't need positioning\n        }}\n      >\n        {/* Expanded Menu - Only Prompt Form */}\n        {isInspecting && selectedElements.length > 0 && (\n          <>\n            {/* Position indicator arrow - positioned on the left */}\n            <div\n              style={{\n                ...elements.menuArrow,\n                top: isMenuAboveElement \n                  ? `${bubblePosition.top + UI_CONSTANTS.MENU_HEIGHT}px` // Arrow at bottom of menu\n                  : `${bubblePosition.top - 8}px`,  // Arrow at top of menu\n                left: `${bubblePosition.left + UI_CONSTANTS.ARROW_LEFT_OFFSET}px`, // Fixed left position with small offset from menu edge\n                borderTop: isMenuAboveElement ? `8px solid ${isDarkMode ? '#1f2937' : 'white'}` : 'none',\n                borderBottom: isMenuAboveElement ? 'none' : `8px solid ${isDarkMode ? '#1f2937' : 'white'}`,\n                pointerEvents: 'none',\n                opacity: selectedElements.length > 0 ? 1 : 0,\n              }}\n              aria-hidden=\"true\"\n            />\n            <div \n              className=\"element-inspector-controls\"\n              style={{\n                ...layout.expandedMenu,\n                ...(isDarkMode ? darkMode.expandedMenu : {}),\n                padding: '16px',\n                position: 'fixed',\n                top: `${bubblePosition.top}px`,\n                left: `${bubblePosition.left}px`,\n                zIndex: UI_CONSTANTS.Z_INDEX,\n                maxHeight: '400px',\n                overflowY: 'auto',\n              }}\n            >\n              {/* Prompt Input */}\n              <PromptForm\n                userPrompt={userPrompt}\n                setUserPrompt={setUserPrompt}\n                handlePromptSubmit={onSubmitPrompt}\n                selectedElementsCount={selectedElements.length}\n                isDarkMode={isDarkMode}\n              />\n            </div>\n          </>\n        )}\n\n        {/* Main Menu Button Container - Only shown when showBubbleMenuButton is true */}\n        {showBubbleMenuButton && (\n          <div style={{ \n            position: 'fixed',\n            bottom: '24px',\n            right: '24px',\n            zIndex: UI_CONSTANTS.Z_INDEX,\n          }}>\n            <BubbleMenuButton \n              isInspecting={isInspecting} \n              onClick={handleMenuToggle} \n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","// Styles for the ElementInspector component\n\n// Layout styles\nexport const layout = {\n  bubble: {\n    position: 'fixed' as const,\n    zIndex: 9999,\n    // Dynamic positioning will be handled in the component\n  },\n  expandedMenu: {\n    backgroundColor: 'white',\n    borderRadius: '8px',\n    boxShadow: '0 4px 20px rgba(0, 0, 0, 0.15)',\n    padding: '16px',\n    width: '350px',\n    transition: 'all 0.15s ease-in-out',\n    zIndex: 9999,\n    position: 'relative',\n  },\n  menuHeader: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: '12px',\n  },\n  inspectorToggle: {\n    marginBottom: '16px',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n  toggleLeft: {\n    display: 'flex',\n    alignItems: 'center',\n    gap: '8px',\n  },\n  toggleRight: {\n    display: 'flex',\n    alignItems: 'center',\n    gap: '8px',\n  },\n  promptForm: {\n    marginTop: '12px',\n  },\n  inputContainer: {\n    display: 'flex',\n  },\n};\n\n// Button styles\nexport const buttons = {\n  mainButton: {\n    backgroundColor: '#3b82f6',\n    color: 'white',\n    borderRadius: '50%',\n    boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n    border: 'none',\n    cursor: 'pointer',\n    transition: 'all 0.2s ease',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: '8px',\n  },\n  mainButtonHover: {\n    backgroundColor: '#2563eb',\n  },\n  closeButton: {\n    color: '#6b7280',\n    background: 'none',\n    border: 'none',\n    cursor: 'pointer',\n    padding: '4px',\n  },\n  closeButtonHover: {\n    color: '#374151',\n  },\n  toggleButton: {\n    padding: '4px 12px',\n    borderRadius: '9999px',\n    fontSize: '12px',\n    fontWeight: '500',\n    border: 'none',\n    cursor: 'pointer',\n    transition: 'colors 0.2s ease',\n  },\n  submitButton: {\n    backgroundColor: '#3b82f6',\n    color: 'white',\n    padding: '8px',\n    borderRadius: '6px',\n    border: 'none',\n    cursor: 'pointer',\n    transition: 'background-color 0.2s ease',\n  },\n  submitButtonHover: {\n    backgroundColor: '#2563eb',\n  },\n};\n\n// Text styles\nexport const text = {\n  menuTitle: {\n    fontSize: '14px',\n    fontWeight: '500',\n    color: '#1f2937',\n  },\n  toggleText: {\n    fontSize: '14px',\n    fontWeight: '500',\n    color: '#374151',\n  },\n  selectedCount: {\n    fontSize: '12px',\n    fontWeight: '500',\n    color: '#10b981',\n  },\n  promptLabel: {\n    display: 'block',\n    fontSize: '14px',\n    fontWeight: '500',\n    color: '#374151',\n    marginBottom: '4px',\n  },\n};\n\n// Input styles\nexport const inputs = {\n  promptInput: {\n    flexGrow: 1,\n    minHeight: \"65px\",\n    fontSize: '14px',\n    outline: 'none',\n    fontFamily: 'inherit',\n    borderColor: 'transparent',\n    padding: 0,\n    width: '100%',\n  },\n  promptInputFocus: {\n    borderColor: '#3b82f6',\n    boxShadow: '0 0 0 1px rgba(59, 130, 246, 0.5)',\n  },\n  promptInputSelected: {\n    borderColor: 'transparent',\n  },\n};\n\n// Element styles\nexport const elements = {\n  elementTagLabel: {\n    position: 'absolute' as const,\n    top: '0.5px',\n    left: '0.5px',\n    backgroundColor: 'rgba(52, 53, 65, 0.8)',\n    borderRadius: '4px',\n    padding: '2px 6px',\n    fontSize: '12px',\n    color: 'white',\n    pointerEvents: 'none' as const,\n  },\n  menuArrow: {\n    position: 'absolute' as const,\n    width: 0,\n    height: 0,\n    borderLeft: '8px solid transparent',\n    borderRight: '8px solid transparent',\n    zIndex: 10001,\n    transform: 'translateX(-8px)',\n    transition: 'all 0.15s ease-in-out',\n  },\n};\n\n// State styles\nexport const states = {\n  toggleButtonActive: {\n    backgroundColor: '#dcfce7',\n    color: '#065f46',\n  },\n  toggleButtonInactive: {\n    backgroundColor: '#f3f4f6',\n    color: '#1f2937',\n  },\n};\n\n// Dark mode styles\nexport const darkMode = {\n  expandedMenu: {\n    backgroundColor: '#1f2937',\n  },\n  menuTitle: {\n    color: '#e5e7eb',\n  },\n  closeButtonHover: {\n    color: '#e5e7eb',\n  },\n  toggleText: {\n    color: '#e5e7eb',\n  },\n  selectedCount: {\n    color: '#34d399',\n  },\n  toggleButtonActive: {\n    backgroundColor: '#064e3b',\n    color: '#ecfdf5',\n  },\n  toggleButtonInactive: {\n    backgroundColor: '#374151',\n    color: '#d1d5db',\n  },\n  promptLabel: {\n    color: '#d1d5db',\n  },\n  promptInput: {\n    backgroundColor: '#374151',\n    color: 'white',\n    borderColor: 'transparent',\n  },\n};\n","\"use client\";\n\n// Custom icon components\nexport const IconPointer = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"lucide lucide-mouse-pointer-click-icon lucide-mouse-pointer-click\"><path d=\"M14 4.1 12 6\"/><path d=\"m5.1 8-2.9-.8\"/><path d=\"m6 12-1.9 2\"/><path d=\"M7.2 2.2 8 5.1\"/><path d=\"M9.037 9.69a.498.498 0 0 1 .653-.653l11 4.5a.5.5 0 0 1-.074.949l-4.349 1.041a1 1 0 0 0-.74.739l-1.04 4.35a.5.5 0 0 1-.95.074z\"/></svg>\n);\n\nexport const IconSquareDashedPointer = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"lucide lucide-square-dashed-mouse-pointer-icon lucide-square-dashed-mouse-pointer\"><path d=\"M12.034 12.681a.498.498 0 0 1 .647-.647l9 3.5a.5.5 0 0 1-.033.943l-3.444 1.068a1 1 0 0 0-.66.66l-1.067 3.443a.5.5 0 0 1-.943.033z\"/><path d=\"M5 3a2 2 0 0 0-2 2\"/><path d=\"M19 3a2 2 0 0 1 2 2\"/><path d=\"M5 21a2 2 0 0 1-2-2\"/><path d=\"M9 3h1\"/><path d=\"M9 21h2\"/><path d=\"M14 3h1\"/><path d=\"M3 9v1\"/><path d=\"M21 9v2\"/><path d=\"M3 14v1\"/></svg>\n);\n\nexport const IconX = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n    <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\n    <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\n  </svg>\n);\n\nexport const IconSend = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n    <path d=\"m22 2-7 20-4-9-9-4Z\"/>\n    <path d=\"M22 2 11 13\"/>\n  </svg>\n);\n\nexport const IconTick = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n    <polyline points=\"20 6 9 17 4 12\"/>\n  </svg>\n);\n\nexport const IconAi = () => (\n  <svg width=\"23\" height=\"23\" viewBox=\"0 0 23 23\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M9.55507 5.34461L10.1322 6.94742C10.7733 8.72633 12.1742 10.1272 13.9531 10.7683L15.5559 11.3455C15.7004 11.3979 15.7004 11.6028 15.5559 11.6545L13.9531 12.2317C12.1742 12.8728 10.7733 14.2736 10.1322 16.0525L9.55507 17.6554C9.5026 17.7998 9.29776 17.7998 9.24601 17.6554L8.66885 16.0525C8.02772 14.2736 6.62688 12.8728 4.84797 12.2317L3.24516 11.6545C3.10069 11.602 3.10069 11.3972 3.24516 11.3455L4.84797 10.7683C6.62688 10.1272 8.02772 8.72633 8.66885 6.94742L9.24601 5.34461C9.29776 5.19942 9.5026 5.19942 9.55507 5.34461Z\" fill=\"black\"/>\n    <path d=\"M16.7699 1.49284L17.0624 2.30431C17.3873 3.2049 18.0967 3.91431 18.9973 4.23918L19.8088 4.53172C19.8821 4.55831 19.8821 4.66181 19.8088 4.6884L18.9973 4.98093C18.0967 5.30581 17.3873 6.01521 17.0624 6.91581L16.7699 7.72728C16.7433 7.80059 16.6398 7.80059 16.6132 7.72728L16.3207 6.91581C15.9958 6.01521 15.2864 5.30581 14.3858 4.98093L13.5743 4.6884C13.501 4.66181 13.501 4.55831 13.5743 4.53172L14.3858 4.23918C15.2864 3.91431 15.9958 3.2049 16.3207 2.30431L16.6132 1.49284C16.6398 1.41881 16.744 1.41881 16.7699 1.49284Z\" fill=\"black\"/>\n    <path d=\"M16.7699 15.2734L17.0624 16.0849C17.3873 16.9855 18.0967 17.6949 18.9973 18.0198L19.8088 18.3123C19.8821 18.3389 19.8821 18.4424 19.8088 18.469L18.9973 18.7615C18.0967 19.0864 17.3873 19.7958 17.0624 20.6964L16.7699 21.5079C16.7433 21.5812 16.6398 21.5812 16.6132 21.5079L16.3207 20.6964C15.9958 19.7958 15.2864 19.0864 14.3858 18.7615L13.5743 18.469C13.501 18.4424 13.501 18.3389 13.5743 18.3123L14.3858 18.0198C15.2864 17.6949 15.9958 16.9855 16.3207 16.0849L16.6132 15.2734C16.6398 15.2001 16.744 15.2001 16.7699 15.2734Z\" fill=\"black\"/>\n  </svg>\n\n);","\"use client\";\nimport React from \"react\";\nimport { IconSquareDashedPointer } from \"../Icons\";\nimport { buttons } from \"../styles\";\n\ninterface BubbleMenuButtonProps {\n  /**\n   * Whether the inspector is currently active\n   */\n  isInspecting: boolean;\n  \n  /**\n   * Click handler for the button\n   */\n  onClick: () => void;\n}\n\n/**\n * The main floating button for toggling the element inspector\n */\nexport function BubbleMenuButton({\n  isInspecting,\n  onClick,\n}: BubbleMenuButtonProps) {\n  return (\n    <button\n      onClick={onClick}\n      style={{\n        ...buttons.mainButton,\n        backgroundColor: isInspecting ? '#2563eb' : '#93c5fd', // Lighter blue when not enabled\n        boxShadow: '0 4px 8px rgba(0, 0, 0, 0.15)',\n      }}\n      onMouseOver={(e) => {\n        e.currentTarget.style.backgroundColor =\n          isInspecting ? '#1d4ed8' : '#60a5fa'; // Darker on hover but still lighter than active\n      }}\n      onMouseOut={(e) => {\n        e.currentTarget.style.backgroundColor =\n          isInspecting ? '#2563eb' : '#93c5fd';\n      }}\n      title={isInspecting ? \"Disable Element Inspector\" : \"Enable Element Inspector\"}\n    >\n      <IconSquareDashedPointer />\n    </button>\n  );\n}\n","\"use client\";\nimport React from \"react\";\nimport { elements } from \"../styles\";\n\ninterface ElementTagLabelProps {\n  /**\n   * The HTML element to display the tag for\n   */\n  element: HTMLElement;\n}\n\n/**\n * A label that displays the tag name of an HTML element\n */\nexport function ElementTagLabel({ element }: ElementTagLabelProps) {\n  return (\n    <div style={elements.elementTagLabel}>\n      {element.tagName.toLowerCase()}\n    </div>\n  );\n}\n","\"use client\";\nimport React from \"react\";\nimport { IconTick, IconAi } from \"../Icons\";\nimport { buttons, darkMode, inputs } from \"../styles\";\n\ninterface PromptFormProps {\n  /**\n   * The current prompt text\n   */\n  userPrompt: string;\n  \n  /**\n   * Function to update the prompt text\n   */\n  setUserPrompt: (value: string) => void;\n  \n  /**\n   * Form submission handler\n   */\n  handlePromptSubmit: (e: React.FormEvent) => void;\n  \n  /**\n   * Number of elements currently selected\n   */\n  selectedElementsCount: number;\n  \n  /**\n   * Whether dark mode is active\n   */\n  isDarkMode: boolean;\n}\n\n/**\n * Form component for entering and submitting prompts for selected elements\n */\nexport function PromptForm({\n  userPrompt,\n  setUserPrompt,\n  handlePromptSubmit,\n  selectedElementsCount,\n  isDarkMode,\n}: PromptFormProps) {\n  return (\n    <form onSubmit={handlePromptSubmit}>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"row\",\n          gap: \"8px\",\n          alignItems: \"flex-start\",\n          width: \"100%\",\n        }}\n      >\n        <div style={{\n          display: 'flex',\n          alignItems: 'flex-start',\n          position: 'relative',\n          gap: '5px',\n          width: '100%' \n        }}>\n          <div className=\"mt-1\"><IconAi /></div>\n          <textarea\n            value={userPrompt}\n            onChange={(e) => setUserPrompt(e.target.value)}\n            style={{\n              ...inputs.promptInput,\n              ...(isDarkMode ? darkMode.promptInput : {}),\n              ...(selectedElementsCount > 0 ? inputs.promptInputSelected : {}),\n              resize: \"none\",\n              minHeight: \"62px\", // Height for approximately 3 lines\n              lineHeight: \"1.5\",\n            }}\n            placeholder={\"Tell me how to modify this element...\\nI can help change its style, content, or behavior.\"}\n          />\n        </div>\n        {userPrompt.trim() !== \"\" && (\n          <button\n            type=\"submit\"\n            style={{\n              ...buttons.submitButton,\n              borderRadius: \"50%\",\n              padding: \"5px\",\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n            onMouseOver={(e) => {\n              e.currentTarget.style.backgroundColor =\n                buttons.submitButtonHover.backgroundColor;\n            }}\n            onMouseOut={(e) => {\n              e.currentTarget.style.backgroundColor =\n                buttons.submitButton.backgroundColor;\n            }}\n          >\n            <IconTick />\n          </button>\n        )}\n      </div>\n    </form>\n  );\n}\n","/**\n * Shared constants for the element prompt builder\n */\n\n// UI Dimensions\nexport const UI_CONSTANTS = {\n  // Menu dimensions\n  MENU_WIDTH: 350, // Width of the control menu in pixels\n  MENU_HEIGHT: 94, // Height of the control menu in pixels\n  \n  // Spacing and offsets\n  SPACING: 10, // Standard spacing for margins and padding\n  ARROW_LEFT_OFFSET: 20, // Left offset for the arrow from menu edge\n  \n  // Z-index values\n  Z_INDEX: 10000, // Standard z-index for UI elements\n};\n","import { useState, useEffect } from 'react';\n\n/**\n * Custom hook to detect and track dark mode preferences\n */\nexport function useDarkMode() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  \n  useEffect(() => {\n    // Check initial dark mode preference\n    const isDark = window.matchMedia && \n      window.matchMedia('(prefers-color-scheme: dark)').matches;\n    setIsDarkMode(isDark);\n    \n    // Listen for changes in color scheme preference\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = (e: MediaQueryListEvent) => setIsDarkMode(e.matches);\n    \n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, []);\n  \n  return isDarkMode;\n}\n","import { useState, useEffect } from 'react';\nimport { UI_CONSTANTS } from '../constants';\n\ninterface BubblePosition {\n  top: number;\n  left: number;\n  arrowOffset: number;\n}\n\ninterface UseElementBubblePositionProps {\n  selectedElements: HTMLElement[];\n  menuHeight?: number;\n  menuWidth?: number;\n  spacing?: number;\n}\n\n/**\n * Custom hook to calculate and update the position of a bubble menu\n * relative to selected elements\n */\nexport function useElementBubblePosition({\n  selectedElements,\n  menuHeight = UI_CONSTANTS.MENU_HEIGHT,\n  menuWidth = UI_CONSTANTS.MENU_WIDTH,\n  spacing = UI_CONSTANTS.SPACING,\n}: UseElementBubblePositionProps) {\n  const [bubblePosition, setBubblePosition] = useState<BubblePosition>({ \n    top: 0, \n    left: 0, \n    arrowOffset: UI_CONSTANTS.ARROW_LEFT_OFFSET \n  });\n  const [isMenuAboveElement, setIsMenuAboveElement] = useState(false);\n  \n  // Calculate and update bubble position based on selected elements\n  useEffect(() => {\n    if (selectedElements.length === 0) return;\n    \n    const updateBubblePosition = () => {\n      const lastElement = selectedElements[selectedElements.length - 1];\n      const rect = lastElement.getBoundingClientRect();\n      const viewportWidth = window.innerWidth;\n      const viewportHeight = window.innerHeight;\n      \n      // Calculate element center point for arrow positioning\n      const elementCenterX = rect.left + (rect.width / 2);\n      \n      // Check if element is near the bottom of the viewport\n      const isNearBottom = (rect.bottom + menuHeight + spacing * 2 > viewportHeight);\n      \n      // Update state to indicate menu position\n      setIsMenuAboveElement(isNearBottom);\n      \n      // Position calculations - below or above the element based on position\n      let top = isNearBottom \n        ? rect.top + window.scrollY - menuHeight - spacing // spacing above the element\n        : rect.bottom + window.scrollY + spacing; // spacing below the element\n        \n      // Initialize left position - align with the element's left edge\n      // (changed from centering to better work with left-aligned arrow)\n      let left = rect.left + window.scrollX;\n      \n      // Special case for elements very close to the bottom of the page\n      if (isNearBottom && rect.top < menuHeight + spacing * 2) {\n        // If there's not enough space above or below, position beside the element\n        const spaceRight = viewportWidth - rect.right;\n        if (spaceRight >= menuWidth + spacing * 2) {\n          // Place to the right\n          top = rect.top + window.scrollY;\n          left = rect.right + window.scrollX + spacing;\n        } else {\n          // As a last resort, position at top of page with enough space for scrolling\n          top = window.scrollY + spacing;\n        }\n      }\n      \n      // Ensure the bubble stays within viewport bounds horizontally\n      left = Math.max(spacing, Math.min(left, viewportWidth - menuWidth - spacing));\n      \n      // Calculate arrow position relative to the menu - should point to element center\n      const arrowOffset = elementCenterX - left - window.scrollX;\n      \n      // Ensure the bubble stays within viewport bounds vertically\n      top = Math.max(spacing, top);\n      \n      setBubblePosition({ \n        top, \n        left, \n        // Keep arrow within menu bounds (spacing*2 to width-spacing*2)\n        arrowOffset: Math.min(Math.max(spacing * 2, arrowOffset), menuWidth - spacing * 2)\n      });\n    };\n    \n    // Initial calculation\n    updateBubblePosition();\n    \n    // Re-calculate on window resize or scroll\n    window.addEventListener('resize', updateBubblePosition);\n    window.addEventListener('scroll', updateBubblePosition);\n    \n    return () => {\n      window.removeEventListener('resize', updateBubblePosition);\n      window.removeEventListener('scroll', updateBubblePosition);\n    };\n  }, [selectedElements, menuHeight, menuWidth, spacing]);\n  \n  return { bubblePosition, isMenuAboveElement };\n}\n","import { useState, useCallback } from 'react';\n\ninterface UseElementSelectionProps {\n  /**\n   * Callback when elements are selected\n   */\n  onElementsSelected?: (elements: HTMLElement[]) => void;\n}\n\n/**\n * Custom hook to manage element selection and hovering\n */\nexport function useElementSelection({ onElementsSelected }: UseElementSelectionProps = {}) {\n  const [hoveredElement, setHoveredElement] = useState<HTMLElement | null>(null);\n  const [selectedElements, setSelectedElements] = useState<HTMLElement[]>([]);\n\n  // Element hover handlers\n  const handleElementHovered = useCallback((element: HTMLElement) => {\n    setHoveredElement(element);\n  }, []);\n\n  const handleElementUnhovered = useCallback(() => {\n    setHoveredElement(null);\n  }, []);\n\n  // Element selection handler\n  const handleElementSelected = useCallback((element: HTMLElement) => {\n    const isElementSelected = selectedElements.includes(element);\n    \n    // If element is already selected, remove it\n    if (isElementSelected) {\n      const newSelectedElements = selectedElements.filter(el => el !== element);\n      setSelectedElements(newSelectedElements);\n      onElementsSelected?.(newSelectedElements);\n    } \n    // If element is not selected, unselect old elements and select only this one\n    else {\n      const newSelectedElements = [element];\n      setSelectedElements(newSelectedElements);\n      onElementsSelected?.(newSelectedElements);\n    }\n  }, [selectedElements, onElementsSelected]);\n\n  // Clear all selections\n  const clearSelections = useCallback(() => {\n    setSelectedElements([]);\n    onElementsSelected?.([]);\n  }, [onElementsSelected]);\n\n  return {\n    hoveredElement,\n    selectedElements,\n    handleElementHovered,\n    handleElementUnhovered,\n    handleElementSelected,\n    clearSelections\n  };\n}\n","import { useCallback, useEffect, useState } from 'react';\n\ntype TabType = 'chat' | 'design' | 'workflow' | null;\n\n/**\n * Custom hook to handle cross-frame communication\n */\nexport function useIframeMessaging() {\n  const isInIframe = typeof window !== 'undefined' && window.self !== window.top;\n  const [activeTab, setActiveTab] = useState<TabType>(null);\n  const [shouldEnableInspect, setShouldEnableInspect] = useState<boolean>(!isInIframe);\n  const [onlySelectButtons, setOnlySelectButtons] = useState<boolean>(false);\n  \n  // Effect to listen for messages from the parent window\n  useEffect(() => {\n    if (!isInIframe) return;\n    \n    const handleMessage = (event: MessageEvent) => {\n      if (event.data?.type === 'TAB_CHANGED') {\n        const { activeTab: newActiveTab } = event.data.payload || {};\n        \n        setActiveTab(newActiveTab as TabType);\n        \n        // Disable inspect mode for chat tab\n        if (newActiveTab === 'chat') {\n          setShouldEnableInspect(false);\n        }\n        // Enable inspect mode for design and workflow tabs\n        else if (newActiveTab === 'design' || newActiveTab === 'workflow') {\n          setShouldEnableInspect(true);\n          // Only allow button selection in workflow tab\n          setOnlySelectButtons(newActiveTab === 'workflow');\n        }\n      }\n    };\n    \n    window.addEventListener('message', handleMessage);\n    return () => {\n      window.removeEventListener('message', handleMessage);\n    };\n  }, [isInIframe]);\n  \n  // Element filter function based on active tab\n  const elementFilter = useCallback((element: HTMLElement): boolean => {\n    // If in workflow tab, only allow button elements\n    if (onlySelectButtons) {\n      // Check if element is a button or has button-like characteristics\n      const isButtonElement = element.tagName.toLowerCase() === 'button';\n      const hasButtonRole = element.getAttribute('role') === 'button';\n      const hasButtonType = element.getAttribute('type') === 'button' || \n                           element.getAttribute('type') === 'submit' || \n                           element.getAttribute('type') === 'reset';\n      \n      // Check for common button class names\n      const classNames = element.className.toLowerCase();\n      const hasButtonClass = classNames.includes('btn') || \n                           classNames.includes('button') ||\n                           classNames.includes('-btn-') ||\n                           classNames.includes('submit') ||\n                           classNames.includes('action');\n      \n      // Check for clickable elements with pointer cursor\n      const computedStyle = window.getComputedStyle(element);\n      const hasCursorPointer = computedStyle.cursor === 'pointer';\n      \n      // Check for elements with event listeners (approximation)\n      const hasOnClickAttr = element.hasAttribute('onclick') || element.hasAttribute('ng-click') || element.hasAttribute('@click');\n      \n      // If any of these conditions are met, consider it a button\n      return isButtonElement || hasButtonRole || hasButtonType || hasButtonClass || (hasCursorPointer && hasOnClickAttr);\n    }\n    // Otherwise allow all elements\n    return true;\n  }, [onlySelectButtons]);\n  \n  // Send selected elements to parent window\n  const sendSelectedElements = useCallback((elements: HTMLElement[]) => {\n    if (!isInIframe) return;\n    \n    window.parent.postMessage({\n      type: 'ELEMENT_INSPECTOR_SELECTED',\n      payload: {\n        elements: elements.map(el => ({\n          tagName: el.tagName,\n          id: el.id,\n          className: el.className,\n          textContent: el.textContent?.trim(),\n          attributes: Array.from(el.attributes).map(attr => ({\n            name: attr.name,\n            value: attr.value\n          }))\n        }))\n      }\n    }, '*');\n  }, [isInIframe]);\n  \n  // Send generated prompt to parent window\n  const sendPrompt = useCallback((prompt: string, elements: HTMLElement[]) => {\n    if (!isInIframe) return;\n    \n    window.parent.postMessage({\n      type: 'ELEMENT_INSPECTOR_PROMPT',\n      payload: {\n        prompt,\n        activeTab,\n        elements: elements.map(el => ({\n          tagName: el.tagName,\n          id: el.id,\n          className: el.className,\n          textContent: el.textContent?.trim(),\n          attributes: Array.from(el.attributes).map(attr => ({\n            name: attr.name,\n            value: attr.value\n          }))\n        }))\n      }\n    }, '*');\n  }, [isInIframe, activeTab]);\n  \n  return {\n    isInIframe,\n    sendSelectedElements,\n    sendPrompt,\n    activeTab,\n    shouldEnableInspect,\n    elementFilter,\n    onlySelectButtons\n  };\n}\n","import { useState, useCallback, useEffect } from 'react';\nimport { createElementsPrompt } from '../utils';\n\ninterface UseInspectorProps {\n  initialIsActive?: boolean;\n  onPromptGenerated?: (prompt: string, elements: HTMLElement[]) => void;\n}\n\n/**\n * Custom hook to manage the inspector state and prompt generation\n */\nexport function useInspector({\n  initialIsActive = true,\n  onPromptGenerated\n}: UseInspectorProps = {}) {\n  const [isInspecting, setIsInspecting] = useState(initialIsActive);\n  const [userPrompt, setUserPrompt] = useState('');\n  \n  // Toggle inspection mode\n  const toggleInspection = useCallback(() => {\n    setIsInspecting(prev => !prev);\n  }, []);\n  \n  // Handle ESC key to exit inspection mode\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === 'Escape' && isInspecting) {\n        setIsInspecting(false);\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [isInspecting]);\n  \n  // Generate prompt from selected elements and user input\n  const generatePrompt = useCallback((elements: HTMLElement[], prompt: string) => {\n    if (elements.length === 0 || !prompt.trim()) return;\n    \n    const generatedPrompt = createElementsPrompt(elements, prompt);\n    \n    // Dispatch custom event for local handlers\n    const promptEvent = new CustomEvent('promptGenerated', {\n      detail: { prompt: generatedPrompt, elements }\n    });\n    document.dispatchEvent(promptEvent);\n    \n    // Call the callback if provided\n    onPromptGenerated?.(generatedPrompt, elements);\n    \n    // Clear the prompt input\n    setUserPrompt('');\n  }, [onPromptGenerated]);\n  \n  // Handle form submission\n  const handlePromptSubmit = useCallback((e: React.FormEvent, elements: HTMLElement[]) => {\n    e.preventDefault();\n    generatePrompt(elements, userPrompt);\n  }, [userPrompt, generatePrompt]);\n  \n  return {\n    isInspecting,\n    userPrompt,\n    setUserPrompt,\n    toggleInspection,\n    handlePromptSubmit,\n    generatePrompt\n  };\n}\n"],"mappings":"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","names":["elements","useCallback","useRef","jsx","useCallback","useEffect","jsx","jsx","jsx","jsx","jsx","jsx","jsxs","useEffect","useState","useEffect","useState","useEffect","useState","useCallback","useCallback","useEffect","useState","elements","useState","useCallback","useEffect","useState","useCallback","useEffect","elements","jsx","jsxs","elements","useCallback","useEffect"]}